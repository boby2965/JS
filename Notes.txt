---------------------- Java Script ------------------

--> Java Script is a light weight (Just-In-Time) JIT interepted programming language.
--> JIT is the process of translating code in browser.
--> Interpeted is the process of line-by-line translation.
--> Several technologies use JavaScript with a compiler and AOT techniques.
--> JavaScript compilers are  : Babel & V8
--> AOT means Ahead-of-Time, code is compiles at application level.

--> JavaScript is a language used in various application environments
                1) Client side          - HTML, Angular, React,Vue     **(Currently used in this course)**
                2) Server side          - NodeJS
                3) Database             - MongoDB
                4) Animations           - Flash, 3DS Max, CAD systems 

--> JavaScript supports various prgraming approaches
                1) Functional programming
                2) Structural programming
                3) Imperative programming
                4) Object Oriented Programming etc ..

Note:- JS is not an OOP language. It Just supports only few features of OOP.

----------------  JavaScript Client Side ----------------

--> JS is used on client side to reduce the burden on server.
--> It reduces round trips.
--> It can reduce burden on server by handling various interactions on client side.

--> JS is used client side with HTML for :
                1. DOM Manipulations
                2. Client Side interactions
                3. Client Side Validations

        --> DOM manipulations include 
                1. Adding element into DOM
                2. Removing element into DOM
                3. Updating data into DOM

        --> Client Side interactions include
                1. location access
                2. Navigation access
                3. History access
                4. Plugins, MIME Types etc..
        
        --> Client Side Validations is the process of verifying user input to ensure
            that contradictory and unauthorized data is not stored into Database.

------------------ Draw backs of JavaScript -------------

--> It is not a strongly typed language.
        variable x=10;          x is a number type
        x= "John";              x is a string type

--> It is not implicitly strictly typed.  (Ti is about Rules of programming)
        userName = "John";  (normally not valid as there is no decleration of data type) // valid in JavaScript

--> It will not support all fratures of OOP.
--> Code level security issues
--> Extensibility issues

            Solution: TypeScript (but this could not be run directly in browser)

----------------- Evolution of JavaScript --------------

--> Client side script started with ECMA script in early 1970's.
--> Internet started with browser called "Mosaic"
            Markup lang : GML
            Scripting   : ECMA script
--> 1995 Netscape Communications - Browser Netscape Communicator  (Every browser now-a-days follow this browsers Architecture)
            Markup lang : HTML
            Scripting   : ECMA Script (not suitable for latest browser)
        Netscape appointed "Brendan Eich" to develop a script for this browser 
            Script Name : Moca  => Live script 
        Netscape given the responsibility of live script to a company "Sun Microsystems"
            Sun renamed live Script => Java Script

--> 2000 Netscape stopped its services and JavaScript was given to "ECMA".
            ES2022 ==> ECMA script 2022
            ES5 => ES-2015
            ES6 => ES-2016
            ES7 => ES-2017

    HTML        --> WHATWG
    JavaScript  --> ECMA
    HTML, CSS, JavaScript : Documentation => MDN => Brendan Eich

-------------- Integration of JS into HTML ---------------

1) Inline 
2) Embedded
3) External File

Inline : 
    - It allows to write JS function directly within the element start tag
    - Script is native and faster when it is Inline
    - However t is hard to reuse and extend

    syntax: 
        <button onclick="window.print()"> Print </button>

Ebedded : 
    - JS functions are defined in a <script> container 
    - so that you can access and use from any location in page.
    - slower when compared to Inline
    - Easy to extend and reuse

    syntax : 
        <script>
        function Name()
        {

        }
        </script>

        <button onclick="Name()"> Print </button>

Note :  - The MIME type for JavaScript is "text/javascript" or "language=javascript"
        - MIME type changes according to compiler and module systems
                "text/babel"
                "text/jsx"
                "module"
        - To run the JavaScript in "strict mode" we need to use "use strict" in the <script> tag 
            <script>
                "use strict"
                document.write("Hello World");
            </script> 
        - To target JS for legacy browsers is done by enclosing the JS code in HTML comments
            <script type=text/javascript>
                <!-- 
                function PrintPage(){
                        window.print();
                }
                -->
            </script>    

External File :
    - add a new javascript file into "src/script" folder
    - add your JS function in ".js" file

                printing.js
        "usestrict"
        <!-- 
                function PrintPage(){
                        window.print();
                }
        -->
    - link JS file to HTML page 
        <script type"text/javascript" src="..src/scripts/printing.js"></script>

Note: External file for web page will increase the number of requests for page and also the page load time will increase
        - to Minify (To reduce the size of the file) - they are used in production 
                it is the process of compressing JS file
                        https://jsminify.org/  => paste your code => minify  => copy => add to "printing.min.js"

        - the minified files cannot be used in developement as they can only catch the problem but cannot report the problem
        (It cannot show where the error occured )
        
        
        
----------------    How JavaScript refers HTML elements   -------------------

1) javascript can refer html elements by DOM hierarchy

                                        BOM (Browser Object Model)

                                                window
                                                  |
                ------------------------------------------------------
                |                   |              |                |
                History         Location        Document        Navigatior      
                                                   |
                                                (index.html)
                                                    |
                                        -------------------------
                        
                                        images[]              DOM (Document Object Model)
                                        links[]
                                        forms[] ---> elements[]
                                                        button,textbox,checkbox
                                       

        syntax: 
                window.document.images[0].src="../public/images/good-morning-image-531.jpg"
                window.document.forms[0].elements[1].value="Register"
                window.document.forms[1].elements[1].value="Login"

        Note:   
                - changing the position of any element in page needs change in the code snippet.

2) JS can refer HTML elements by using their reference "name"
        syntax: 
                <img name="pic">
                <script>
                {
                        pic.src=""
                        frmRegister.btnRegister.value="Register"
                }
                </script>

        - we can't refer any child element directly. It must be accessed only with reference of it parent.              
       
                btnRegister.value="Register"                    // invalid
                frmRegister.btnRegister.value="Register"        // valid

        - "name" attribute can be common for several elements which throws an error.

                <input type="radio" name="gender" value="male">
                <input type="radio" name="gender" value="female">

3) JS can refer HTMl elements by using their "ID"
        JS provides a document method
                "document.getElementById()"
        - by using this we can get any element from any hierarchy

        syntax: 
                <img id="pic">

                {
                        document.getElementById("pic").src="";
                }
        - ID is a selector used for CSS hence JS ID reference conflicts with CSS ID.

4) JS can refer HTML elements by using Query Selectors - CSS selectors.
        - JS provides a document method 
                "document.querySelector()"

        syntax: 
        <img class="card-img-top">

        {
                document.querySelector(".card-img-top" ).src="";

        }

        <input type="submit">
        {
                document.querySelector("input[type=submit]").value= "Register";
        } 

        <input type="button" id="btnLogin">
        {
                document.querySelector("#btnLogin").value= "";
        } 

---------------------   JavaScrip Output Techniques  -----------------------

- programming languages are used to handle communication between user and the device.
- a language takes input from the user, processes the input and generates a response costumised to every request.
- output is the process of rendering result to the client.
- JS output is handled by using various properties and methods.
                1) alert()
                2) confirm()
                3) document.write()
                4) innerText
                5) innerHTML
                6) outerHTML
                7) console methods


        alert() :
                - alert is a message box that pops up from the browser window.
                - It is a member of "window" Object in BOM.
                - It can display message and seek confirmation with OK.
                - It will not allow to cancel.

                syntax:
                         alert("Your message");

                - Message is a sting or expression and only RC data type (only allows plain text content).
                syntax: 
                        alert(20+30);
                
                -If you want message in multiple lines then use "\n" for line break.
                syntax: 
                        alert("line-1 \n line-2");
                
        confirm():
                - It is a JS "window" method same as the alert() but provides cancel button
                - It is a boolean method, which returns "true" or "false".

                        true = on OK click
                        false = on Cancel click

                syntax: 
                        confirm("string |expression ");

        document.write() :
                - It is a output method that renders output in new screen.
                - It is a technique that allows a markup for presentation.

                syntax: 
                        document.write("string | expression | markup");

        innerText:
                - It is a property used for HTML elements that can display text content.
                ex: <div>, <span></span>, <p> </p>,
                
                syntax: 
                        element.innerText="string";
                
                - innrtText is RC dataType and will not allow Markup
                - if you are trying to render output in the same page then you can use innerText.
        
        innerHTML :
                - It is similar to innerText but allows formats for text
                - You can render markup by using innerHTML.

                syntax:
                element.innerHTML= "string | expression | markup"
        
        outerHTML:
                - outerHTML is a property similar to innerHTML.
                - It can replace the existing element with new elements.
                - innerHTML will not replace elements, it can just render element with in the context of another element.
                
                syntax:
                        element.outerHTML = "string | expression | markup";


        Console Methods:
                - Every browser provides a Console
                - console is a  CLI (Command line tool) used by developers to test various languages related methods and properties.
                - console methods for output are
                        console.log()           [Contextual]
                        console.warn()
                        console.error()
                        console.info()
                        console.debug()

                syntax:
                        console.log("string | expression");
                
                - console is not for markup.
                - Multiple lines can be defined by using "\n" as line break.

-------------------- JavaScript input Techniques ------------------

- JS can take input from user by using 3 techniques
        1) Query string
        2) prompt()
        3) HTML Form input elements


        prompt():
                - It is an input box provided by Javascript "window" object.
                - It allows to input a string
                - prompt() method returns
                        null => cancel
                        string => OK
                
                syntax: 
                        prompt("Message", "default_value");
                        prompt("Message");
        
        Javascript input using Form elements:
                - HTML form provides various elements for input like 
                        textbox         checkbox
                        number          radio
                        password        color
                        range           textarea
                        email
                        url
                        file
                        date

