---------------------- Java Script ------------------

--> Java Script is a light weight (Just-In-Time) JIT interepted programming language.
--> JIT is the process of translating code in browser.
--> Interpeted is the process of line-by-line translation.
--> Several technologies use JavaScript with a compiler and AOT techniques.
--> JavaScript compilers are  : Babel & V8
--> AOT means Ahead-of-Time, code is compiles at application level.

--> JavaScript is a language used in various application environments
                1) Client side          - HTML, Angular, React,Vue     **(Currently used in this course)**
                2) Server side          - NodeJS
                3) Database             - MongoDB
                4) Animations           - Flash, 3DS Max, CAD systems 

--> JavaScript supports various prgraming approaches
                1) Functional programming
                2) Structural programming
                3) Imperative programming
                4) Object Oriented Programming etc ..

Note:- JS is not an OOP language. It Just supports only few features of OOP.

----------------  JavaScript Client Side ----------------

--> JS is used on client side to reduce the burden on server.
--> It reduces round trips.
--> It can reduce burden on server by handling various interactions on client side.

--> JS is used client side with HTML for :
                1. DOM Manipulations
                2. Client Side interactions
                3. Client Side Validations

        --> DOM manipulations include 
                1. Adding element into DOM
                2. Removing element into DOM
                3. Updating data into DOM

        --> Client Side interactions include
                1. location access
                2. Navigation access
                3. History access
                4. Plugins, MIME Types etc..
        
        --> Client Side Validations is the process of verifying user input to ensure
            that contradictory and unauthorized data is not stored into Database.

------------------ Draw backs of JavaScript -------------

--> It is not a strongly typed language.
        variable x=10;          x is a number type
        x= "John";              x is a string type

--> It is not implicitly strictly typed.  (This is about Rules of programming)
        userName = "John";  (normally not valid as there is no decleration of data type) // valid in JavaScript

--> It will not support all fratures of OOP.
--> Code level security issues
--> Extensibility issues

            Solution: TypeScript (but this could not be run directly in browser)

----------------- Evolution of JavaScript --------------

--> Client side script started with ECMA script in early 1970's.
--> Internet started with browser called "Mosaic"
            Markup lang : GML
            Scripting   : ECMA script
--> 1995 Netscape Communications - Browser Netscape Communicator  (Every browser now-a-days follow this browsers Architecture)
            Markup lang : HTML
            Scripting   : ECMA Script (not suitable for latest browser)
        Netscape appointed "Brendan Eich" to develop a script for this browser 
            Script Name : Moca  => Live script 
        Netscape given the responsibility of live script to a company "Sun Microsystems"
            Sun renamed live Script => Java Script

--> 2000 Netscape stopped its services and JavaScript was given to "ECMA".
            ES2022 ==> ECMA script 2022
            ES5 => ES-2015
            ES6 => ES-2016
            ES7 => ES-2017

    HTML        --> WHATWG
    JavaScript  --> ECMA
    HTML, CSS, JavaScript : Documentation => MDN => Brendan Eich

-------------- Integration of JS into HTML ---------------

1) Inline 
2) Embedded
3) External File

Inline : 
    - It allows to write JS function directly within the element start tag
    - Script is native and faster when it is Inline
    - However t is hard to reuse and extend

    syntax: 
        <button onclick="window.print()"> Print </button>

Ebedded : 
    - JS functions are defined in a <script> container 
    - so that you can access and use from any location in page.
    - slower when compared to Inline
    - Easy to extend and reuse

    syntax : 
        <script>
        function Name()
        {

        }
        </script>

        <button onclick="Name()"> Print </button>

Note :  - The MIME type for JavaScript is "text/javascript" or "language=javascript"
        - MIME type changes according to compiler and module systems
                "text/babel"
                "text/jsx"
                "module"
        - To run the JavaScript in "strict mode" we need to use "use strict" in the <script> tag 
            <script>
                "use strict"
                document.write("Hello World");
            </script> 
        - To target JS for legacy browsers is done by enclosing the JS code in HTML comments
            <script type=text/javascript>
                <!-- 
                function PrintPage(){
                        window.print();
                }
                -->
            </script>    

External File :
    - add a new javascript file into "src/script" folder
    - add your JS function in ".js" file

                printing.js
        "usestrict"
        <!-- 
                function PrintPage(){
                        window.print();
                }
        -->
    - link JS file to HTML page 
        <script type"text/javascript" src="..src/scripts/printing.js"></script>

Note: External file for web page will increase the number of requests for page and also the page load time will increase
        - to Minify (To reduce the size of the file) - they are used in production 
                it is the process of compressing JS file
                        https://jsminify.org/  => paste your code => minify  => copy => add to "printing.min.js"

        - the minified files cannot be used in developement as they can only catch the problem but cannot report the problem
        (It cannot show where the error occured )
        
        
        
----------------    How JavaScript refers HTML elements   -------------------

1) javascript can refer html elements by DOM hierarchy

                                        BOM (Browser Object Model)

                                                window
                                                  |
                ------------------------------------------------------
                |                   |              |                |
                History         Location        Document        Navigatior      
                                                   |
                                                (index.html)
                                                    |
                                        -------------------------
                        
                                        images[]              DOM (Document Object Model)
                                        links[]
                                        forms[] ---> elements[]
                                                        button,textbox,checkbox
                                       

        syntax: 
                window.document.images[0].src="../public/images/good-morning-image-531.jpg"
                window.document.forms[0].elements[1].value="Register"
                window.document.forms[1].elements[1].value="Login"

        Note:   
                - changing the position of any element in page needs change in the code snippet.

2) JS can refer HTML elements by using their reference "name"
        syntax: 
                <img name="pic">
                <script>
                {
                        pic.src=""
                        frmRegister.btnRegister.value="Register"
                }
                </script>

        - we can't refer any child element directly. It must be accessed only with reference of it parent.              
       
                btnRegister.value="Register"                    // invalid
                frmRegister.btnRegister.value="Register"        // valid

        - "name" attribute can be common for several elements which throws an error.

                <input type="radio" name="gender" value="male">
                <input type="radio" name="gender" value="female">

3) JS can refer HTMl elements by using their "ID"
        JS provides a document method
                "document.getElementById()"
        - by using this we can get any element from any hierarchy

        syntax: 
                <img id="pic">

                {
                        document.getElementById("pic").src="";
                }
        - ID is a selector used for CSS hence JS ID reference conflicts with CSS ID.

4) JS can refer HTML elements by using Query Selectors - CSS selectors.
        - JS provides a document method 
                "document.querySelector()"

        syntax: 
        <img class="card-img-top">

        {
                document.querySelector(".card-img-top" ).src="";

        }

        <input type="submit">
        {
                document.querySelector("input[type=submit]").value= "Register";
        } 

        <input type="button" id="btnLogin">
        {
                document.querySelector("#btnLogin").value= "";
        } 

---------------------   JavaScrip Output Techniques  -----------------------

- programming languages are used to handle communication between user and the device.
- a language takes input from the user, processes the input and generates a response costumised to every request.
- output is the process of rendering result to the client.
- JS output is handled by using various properties and methods.
                1) alert()
                2) confirm()
                3) document.write()
                4) innerText
                5) innerHTML
                6) outerHTML
                7) console methods


        alert() :
                - alert is a message box that pops up from the browser window.
                - It is a member of "window" Object in BOM.
                - It can display message and seek confirmation with OK.
                - It will not allow to cancel.

                syntax:
                         alert("Your message");

                - Message can a sting or expression and only RC data type (only allows plain text content).
                syntax: 
                        alert(20+30);
                
                -If you want message in multiple lines then use "\n" for line break.
                syntax: 
                        alert("line-1 \n line-2");
                
        confirm():
                - It is a JS "window" method same as the alert() but provides cancel button
                - It is a boolean method, which returns "true" or "false".

                        true = on OK click
                        false = on Cancel click

                syntax: 
                        confirm("string |expression ");

        document.write() :
                - It is a output method that renders output in new screen.
                - It is a technique that allows a markup for presentation.

                syntax: 
                        document.write("string | expression | markup");

        innerText:
                - It is a property used for HTML elements that can display text content.
                ex: <div>, <span></span>, <p> </p>, <h2></h2>, <blockquote></blockquote>, <li></li>
                
                syntax: 
                        element.innerText="string";
                Ex:
                        document.querySelector("p").innerText="Record Deleted"
                
                - innrtText is RC dataType and will not allow Markup
                - if you are trying to render output in the same page then you can use innerText.
        
        innerHTML :
                - It is similar to innerText but allows to format "text" in the HTML by using innerHtml method.
                - You can render markup by using innerHTML.

                syntax:
                element.innerHTML= "string | expression | markup"
        
        outerHTML:
                - outerHTML is a property similar to innerHTML.
                - It can replace the existing element with new elements.
                - innerHTML will not replace elements, it can just render element with in the context of another element.
                
                syntax:
                        element.outerHTML = "string | expression | markup";


        Console Methods:
                - Every browser provides a Console
                - console is a  CLI (Command line tool) used by developers to test various languages related methods and properties.
                - console methods for output are
                        console.log()           [Contextual]
                        console.warn()
                        console.error()
                        console.info()
                        console.debug()

                syntax:
                        console.log("string | expression");
                
                - console is not for markup.
                - Multiple lines can be defined by using "\n" as line break.

-------------------- JavaScript input Techniques ------------------

- JS can take input from user by using 3 techniques
        1) Query string
        2) prompt()
        3) HTML Form input elements


        prompt():
        - It is an input box provided by Javascript "window" object.
        - It allows to input a string
        - prompt() method returns
                        null => cancel
                        string => OK
                
                syntax: 
                        prompt("Message", "default_value");
                        prompt("Message");
        
        Javascript input using Form elements:
        - HTML form provides various elements for input like 
                        textbox         checkbox
                        number          radio
                        password        color
                        range           textarea
                        email
                        url
                        file
        
        Query String:
        - Query tring is data appended into URL 
        - It is defined in browser address bar 
        - Query string is appended by using "?" and "&"
        
                syntax:
                        https://127.0.0.1:5500/page.html?name=value&name=value 

        - You can access the query string by using JavaScript "location.search"
                [location object => search property]
        
        Note:
                You need few string functions to read and extract string.
                        indexOf()       => It returns index number of any specified character.
                        slice()         => It returns the chars from specified index.
                syntax:
                        url?username=John       
                        
                        str=location.search;
                        str.slice(str.indexOf("=")+1) ;  // John 
                => query string is passed in browser as 
                        ?username=John 

-----------------    JavaScript Language Basics    -----------------
1. variables 
2. Data Types 
3. Operators 
4. Statements 
5. Functions 

        Variables:
        ----------
        - Variables are storage location in memory where you can store a value and use as a part of any expression.
        syntax:
                <script>
                        username=prompt("Enter Your Name")
                        document.write("Hello!" + username + "<br>");
                        document.write("Hi" + username);
                </script>

        - JavaScript allows to configure a variable directly without initialization or decleration if it is not in strict mode.
                <script>
                        username= "John";                        //valid 
                        document.write=(username);
                </script>

                 <script>
                        "use strict"
                        username= "John";                        //invalid 
                        document.write=(username);
                </script>

        - In strict mode JavaScript variable must be declared or initialized.
        - Variables in JS are declared by using 3 keywords
                1) var 
                2) let  
                3) const 
        
        - Every variable configuration comprises of 3 phases 
         a) Declaration 
         b) Assignment 
         c) Initialization 

                var x;          --> Decleration 
                x = 10;         --> Assignment 
                var y=20;       --> Initialization 
                y=30;           --> Assignment  

        FAQ: What is the difference between var, let and const ?
                var:
                - It is a function scope variable.
                - A function scope variable is configured at any block(inside to outside or outside to inside block) and can be 
                  accessed from any another function.
                - It allows to configure a variable which is accessible to the current function and all its inner function.
                - The mechanism of providing access for variable to its inner function is known as "Closure". 

                syntax:
                        <script>
                                function f1(){
                                        var x;
                                        x=10;
                                        if(x==10)
                                        {
                                        var y=20;
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                        }
                                }
                                f1();
                        </script>

                        (or)

                        <script>
                                function f1(){
                                        var x;
                                        x=10;
                                        if(x==10)
                                        {
                                        var y=20;
                                        }

                                        document.write("x=" + x + "<br>" + "y=" + y );
                                }
                                f1();
                        </script>

                - It allows declaring, assignment and initialization.
                - It allows "shadowing". 
                - Shadowing is the process of re-declaring or initialization same name identifier with in the scope.
                syntax:
                        {
                                var x=10;
                                var x= 20;    // shadowing  ==> valid 
                        }

                - It allows "hoisting".
                - Hoisting is a technique followed by interpeter, where it allows to use a variable and declare or initialize later.
                There is no order in declaring and using.

                syntax:
                        <script>
                                "use strict"
                                function f1(){
                                        x=10;
                                        document.write("x=" + x);
                                        var x;              // hoisting 
                                }
                                f1();
                        </script>
                Let:
                ----
                - It is used to configure block scope variable.
                - Block scope variable is accessible within the specified block and all its inner block.
                - The members of inner block are not accessible to outer block if defined by using "let".
                - It allows declaring, assignment, and Initialization.

                syntax:
                        <script>
                                function f1(){
                                        let x;              // declaration
                                        x=10;               // assignment 
                                        if(x==10)
                                        {
                                        let y=20;       // initilization 
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                        }
                                }
                                f1();
                        </script>

                        (or)

                        <script>
                                function f1(){
                                        let x;
                                        x=10;
                                        if(x==10)
                                        {
                                        let y=20;               // not valid 
                                        
                                        }
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                }

                                f1();
                        </script>
                
                - It will not allow shadowing.
                - It will not allow hoisting.
                
                const:
                ------
                - It is also block scope.
                - It allows only initialization, no declaration and no assignment.
                - It will not allow hoisting and shadowing.
                syntax:
                        <script>
                                "use strict";
                                function f1(){
                                        const x;
                                        x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>

                        <script>
                                "use strict";
                                function f1(){
                                        const x=5;
                                        x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>
                         <script>
                                "use strict";
                                function f1(){
                                        const x=5;
                                        const x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>

                         <script>
                                "use strict";
                                function f1(){                                  
                                        document.write("x=" + x);  //not valid 
                                        const x=5;
                                }
                                f1();
                        </script>
                
        Variable Naming:
        ---------------
        - Name should not start with a number.
        - Name nust start with aplhabet.
        - it can be alpha numeric.
        - It can start with "_" special character [only in Development]
        - special characters are not recomended.
        - Name cannot have blank spaces. 
        - It can't be more than 255 chars.
        - Name must speak what it is.
        - It is better to use "camelCase" for names.
        - It cannot be a "keyword".
        
                syntax:
                -------
                        var _productName;        // this is not final, It requires further implementation.
                        var 2023_sales;         // invalid
                        var sales_2023;         // Valid

        Global Scope:
        -------------
        - It configures variable at module level.
        - So that variable is accessible to all functions in module.
        - You can declare global variables by using the key words : var, let, const

                syntax:
                -------
                        <script>
                                // Module       
                                var x=10;       ]       
                                let y=20;       ]   Global in access     
                                const z=30;     ]

                        function f1(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z + "<br>") 
                        }
                        function f2(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z  + "<br>")
                        }
                        f1();
                        f2();
                        </script>
                
        FAQ: How to define a  global variable in function?
        - By using "window" object of javaScript 

                <script>
                        
                        function f1(){
                                window.a = 100;
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z  +"<br> a=" + a) 
                        }
                        function f2(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z +  "<br> a=" + a)
                        }
                        f1();
                        f2();
                </script>

Data Types:
----------
- In computer programming, Data type refers to "Data structure" [DS]
- Data structure defines "the type of data" and its "range".

        var x;    => Undefined 
- JavaScript is not a strongly typed language. You can't set restriction for type of value in a variable. 
But you can validate.
- JavaScript is an "implictly" typed language.
- The data type is determined according to the value defined.

        var x;          // Undefined 
        x=10;           // number 
        x=true;         // boolean 
        x="John"        // string 
[It is also refered to as Dynamically typed]
- JavaScript types are classified into 2 groups 
        a) Primitive Type 
        b) Non-Primitive type

        Primitive Type:
        ---------------
        - They are immutuable types. [Structure can't be changed.]
        - They have a fixed range for value.
        - The structure of value can't change.
        - They are stored in memory stack [Last in First Out]
        - Javascript Primitives types 
                a) number 
                b) string 
                c) boolean 
                d) null 
                e) undefined 
                f) symbol 
                       
                Number Type:
                ------------
                - JavaScript number type refers to numreic values which include 
                        Signed Integer                  => -6, 
                        Unsigned Integer                => 4
                        Floating point                  => 34.00                [2:2]
                        Double                          => 342.535              [3:3]
                        Decimal                         => 3567.30             [29 Decimal places]
                        Binary                          => 0b1010 
                        Hexa                            => 0fx023
                        Octa                            => 0o724
                        Bigint                          => 2n
                        Exponent                        => 2e3                 [2000] 2x10(3)
                
                - Every input from HTML is considered as "String Type", which you have to convert into number 
                by using parsing methods.
                        parseInt();
                        parseFloat();

                syntax:
                -------
                        var age = "22";
                        document.write("You will be " + (age+1) + " next year.");      // 221

                        var age = parseInt("22");
                        document.write("You will be " + (age+1) + " next year.");      //23

                        var age = parseInt("12.45");
                        document.write("You will be " + (age+1) + " next year.");      //13

                        var age = parseFloat("12.45");
                        document.write("You will be " + (age+1) + " next year.");      //13.45

                - You can validate the number input by using the function " isNAN() ".
                - isNaN is a boolean function that returns "true" when input value is not a number.
                
                syntax:
                        var age="3A";

                        if(isNaN(age)){                => true 
                                ... code ....
                        }
                - You have to convert a numeric value into "string " to apply string formats 
                - javascript numeric values are converted into a string by using "toString" function.

                        var price= 46000;                       // number 
                        var formattedPrice = price.toString;    // String 

                - JavaScript provides "Math" object to handle various mathematical operations on numeric values.
                        Math.PI 
                        Math.sqrt()
                        Math.pow()
                        Math.random()
                        Math.round()
                        Math.floor()
                        Math.ceil()
                        Math.sin()
                        Math.cos()
                        Math.tan()
                        
                String Type:
                ------------
                        - String is a literal with group characters enclosed in 
                        
                                a) Double Quotes        "    "
                                b) Single Quotes        '    '
                                c) Back Tick            `    `

                        - Single and double quotes are used to switch between inner and outer strings.

                                Syntax:
                                        var link = "<a href=' home.html '> Home </a>";

                                        var link = '<a href="home.html"> Home </a>';

                        - Backtick is available from JavaScript ES5 version.
                        - Backtick allows a string with embedded expression.
                        - It can use the new data binding expression "${ }"

                                Syntax:
                                        `your string ${expression} your string`;

                Ex:
                        <script>
                        var userName = "John";
                        var age = 22;
                        var msg1 = "Hello !" + " " + userName + " " + "you will be" + " " + (age+1) + " " + "next year.";
                        var msg2 = `Hello ! ${userName} you will be ${age+1} next year.`;
                        document.write(msg1 + "<br>" + msg2);
                        </script>

                Ex:
                        <script>
                        var title = prompt("Enter Title");
                        var uid = prompt("Enter User ID Type","Email | Mobile| UserId");
                        var uid_type = prompt("Enter User Id Input Type");
                        var buttonText = prompt("Enter Button Text");
                        var login = `
                        <h4>${title}</h4>
                        <dl>
                                <dt>${uid}</dt>
                                <dd><input type=${uid_type}></dd>
                                <dt>Password</dt>
                                <dd><input type="password"></dd>
                        </dl>
                        <button>${buttonText}</button>
                        `;
                        document.write(login);
                        </script>

                        - Several special characters in a string escape printing.
                        - You can print the non-printable characters by using escape sequence character "\".

                                Syntax:
                                        var path = "d:\images\asp.jpg";            => d:imagesasp.jpg
                                        var path = "d:\\images\\asp.jpg";        => d:\images\asp.jpg
                String Formatting:
                ------------------
                        Style Binding:
                        -------------

                        - JavaScript provides various methods and properties to format and manipulate string.
                        - JavaScript methods for formatting a string.

                        Method                Description
                        ------------------------------------------------------------------
                        bold()                    sets <b></b>
                        Italic()                    sets <i>
                        fontcolor()            sets text color
                        fontsize()                sets text size
                        strike()                strikeout
                        underline()            underline
                        sup()                    super script
                        sub()                    sub script
                        toUpperCase()        converts to uppercase
                        toLowerCase()        converts to lowercase

                                Syntax:
                                        var msg = "Welcome";
                                        document.write(msg.bold().toUpperCase().fontcolor('red'));

                        Note: RC data type elements will not allow all formats, as they are HTML elements.

                        Style Binding:
                        --------------

                        - It is the process of binding CSS attributes to HTML elements dynamically.
                        - You can format string using CSS attributes.
                        - CSS attributes are defined to any element dynamically by using "style" property.

                                Syntax:
                                        element.style.cssAttribute = value;

                        - CSS attributes are configured in "camelCase".

                                CSS Attribute            JavaScript Attribute
                                ---------------          --------------------
                                text-align              textAlign
                                background-color        backgroundColor
                                font-style              fontStyle
                                color                   color

                                Syntax:
                                        element.style.color = "red";
                                        element.style.backgroundColor="yellow";

                        Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        error.style.fontWeight = "bold";
                                        error.style.backgroundColor="yellow";
                                        error.style.width="200px";

                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                        Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        document.getElementById("txtName").style.border = "2px solid red";
                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                        Class Binding:
                        --------------
                        - You can apply a CSS class to any string or element dynamicaly.
                        - It is defined by using the attribute "className".

                                Syntax:
                                        element.className="css class1  class2";

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <style>
                                .error-style {
                                border:1px solid red;
                                box-shadow: 2px 2px 2px red;
                                }
                        </style>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        document.getElementById("txtName").className = "error-style";
                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                Ex: Theme for Login

                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                        <script type="text/javascript">
                                function ThemeChanged(){
                                var themeCheck = document.getElementById("theme");
                                var loginContainer = document.getElementById("loginContainer");
                                var button = document.querySelector("button");

                                if(themeCheck.checked){
                                        loginContainer.className = "border border-2 p-4 w-25 bg-dark text-white";
                                        button.className = "btn btn-light w-100";
                                } else {
                                        loginContainer.className = "border border-2 p-4 w-25";
                                        button.className = "btn btn-dark w-100";
                                }
                                }
                        </script>
                        </head>
                        <body class="container-fluid d-flex justify-content-center align-items-center" style="height:500px">
                        <div class="border border-2 p-4 w-25" id="loginContainer">
                                <div class="form-switch">
                                <input type="checkbox" id="theme" onchange="ThemeChanged()" class="form-check-input"> Dark Theme
                                </div>
                                <h2>User Login</h2>
                                <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" class="form-control"></dd>
                                <dt>Password</dt>
                                <dd><input type="password" class="form-control"></dd>
                                </dl>
                                <button class="btn btn-dark w-100">Login</button>
                        </div>
                        </body>
                        </html>
                        
                String Manipulation Methods and Properties:
                -------------------------------------------

                Member                                  Description
                --------------                          ----------------------
                length                                  It returns total count of characters in a string 
                                                        syntax:
                                                                var srt = "welcome";
                                                                str.length;             // 7
                
                charAt()                                It returns the character at specified index 
                                                                var str= "welcome";
                                                                str.charAt(0);          // w 
                
                charCodeAt()                            It returns ascii code of characters at specified index 
                                                                var str ="Ajay";
                                                                str.charCodeAt(0);             // 65 
                
                indexOf()                               It returns the index number of char specified in the string. If char not 
                                                        found then it retruns "-1".
                                                                var str= "welcome";
                                                                str.indexOf("e");               // 1
                                                                str.indexOf("@");               // -1
                
                lastIndexOf()                           It returns the last occurance index number of specified char 
                                                                var str= "welcome";
                                                                str.lastIndexOf("e")            // 7

                startsWith()                            It returns a boolean true if the string starts with the specified char(s).
                endsWith()                              It returns a boolean true if the string endswith the specified char(s).
                                                                synatx:
                                                                        var str= "welcome";
                                                                        str.startsWith("w");            // true
                                                                        str.endsWith("w");              // false   

                match()                                 It is used to verify your value with any regular expression and 
                                                        return boolean true if value is matching the expression.

                                                        Regular expression in Javascript is defined within "/  /" block.

                                                                Syntax:
                                                                        var value = "david";
                                                                        var regExp = /[A-Z]{4,10}/;
                                                                        value.match(regExp)     => false

                slice()                                 It is used to extract a string between specified index.
                substr()                                It reads the specified number of chars from given index.
                substring()                             It is bi-directional in reading.

                trim()                                  It is used to remove leading spaces in a string.
                                                        Leading space includes blank space before and after the string.

                                                                Syntax:
                                                                        var  code = "   4442";
                                                                        code.trim();            // "4442"
                
                split()                                 It splits the string into an array. It identifies the delimeter [separator]
                                                        and splits the string into multiple elements.
                                                        The result is a array of strings.

                                                                Syntax:
                                                                        var str = "A, B";
                                                                        result= str.split(',');        // result [0] = A
                                                                                                        // result [1] = B                                                                      
                        Ex:
                        <script>
                                var contacts = "john-9993828812, david-8883727172";
                                var result = contacts.split(',');
                                document.write(`${result[0]} <br> ${result[1]}`);
                        </script>

                        Ex:
                        <script>
                                var contacts = "john-9993828812, david-8883727172";
                                var [john, david] = contacts.split(',');
                                document.write(john + "<br>" + david);
                        </script>        

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                                <meta charset="UTF-8">
                                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <title>Document</title>
                                <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                                <script type="text/javascript">
                                        function VerifyCard(){
                                        var card = document.getElementById("txtCard").value;
                                        var img = document.getElementById("imgCard");
                                        if(card.startsWith("4455")) {
                                                img.src = "../public/images/visa.png";
                                        } else {
                                                img.src = "../public/images/master.png";
                                        }
                                        }
                                        function VerifySkype(){
                                        var skype = document.getElementById("txtSkype").value;
                                        var error = document.getElementById("error");
                                        if(skype.endsWith("outlook.com")) {
                                                error.innerHTML ="";
                                        } else {
                                                error.innerHTML ="Invalid Skype Id".fontcolor('red');
                                        }
                                        }
                                </script>
                        </head>
                        <body class="container-fluid">
                                <dl class="mt-2 w-25">
                                        <dt>Your Card Number</dt>
                                        <dd class="input-group"><input type="text" onblur="VerifyCard()" class="form-control" id="txtCard"><img id="imgCard" height="40" class="input-group-text"></dd>
                                        <dt>Your Skype Id</dt>
                                        <dd>
                                        <input type="text" class="form-control" id="txtSkype" onblur="VerifySkype()">
                                        </dd>
                                        <dd id="error"></dd>
                                </dl>
                        </body>
                        </html>
                        
                        FAQ: What is difference between slice, substr and substring methods ?
                        Ans:

                        1. slice    : It refers the chars between start and end index.
                                        End index number is optional.
                                        If end index is defined then it must be greater than start index.
                        Syntax:
                                slice(startIndex, endIndex);
                                slice(4);                           4 to end
                                slice(4,16);                        4 to 16 index
                                slice(4,0);                         invalid
                                slice(4,2);                         invalid

                        2. substr    : It defines the number of chars to read from specified index.
                                        It can't have any index reference defined bi-directional.

                        Syntax:
                                substr(startIndex, countOfCharsToRead);
                                substr(4, 3);                   => reads 3 chars from 4 index
                                substr(4);                      => reads all chars upto end from 4 index
                                substr(4,0);                    => no value returned
                                
                        3. substring:  It defines the chars between specified index bi-directional.

                        Syntax:
                                substring(7)                    => reads from 7 index to end
                                substring(7,0)                  => reads from 7 to 0 index [start]
                                substring(7, 14)                => reads from 7 index to 14 index

                        Ex:
                        <script>
                                var msg = "Welcome to JavaScript";
                                document.write(msg.slice(7,0) + "<br>");
                                document.write(msg.substr(7,0) + "<br>");
                                document.write(msg.substring(7,0));
                        </script>

                        Ex:

                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function VerifyOTP(){
                                var otp = document.getElementById("txtOTP").value;
                                var error = document.getElementById("error");
                                if(otp.trim()=="4424"){
                                        error.innerHTML = "OTP Verified".fontcolor('green');
                                } else {
                                        error.innerHTML = "Invalid OTP".fontcolor('red');
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>Your OTP</dt>
                                <dd><input type="text" id="txtOTP" onblur="VerifyOTP()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                Boolean Type:
                -------------
                - Boolean types are used in decision making.
                - JavaScript boolean types can handle 2 values "true" & "false".
                - JavaScript boolean value can compare with 1 & 0.

                                true = 1
                                false = 0
                syntax:
                        var x = 1;            // number
                        var x = true;        // boolean
                        if(x==1) {            // true - not good
                
                        }
                        if(x==true) {        // true - good 

                        }

                Ex:
                        <script>
                                var stock = false;
                                if(stock==1){
                                        document.write("Available");
                                } else {
                                        document.write("Out of Stock");
                                }
                        </script>

                       
                        FAQ:
                                true + true =  ?        // 2
                                true + 2     =  ?       // 3
                                true + "A"     =  ?     // trueA
                                true + false = ?        // 1

                        Which HTML Attributes are boolean type?
                                -disabled            <button  disabled>        element.disabled = false;
                                -readonly
                                -required
                                -checked 

                Ex: Toggle Button

                Undefined type:
                ---------------
                - JavaScript is implicitly typed.
                - The data type of variable is determined according to the value defined.
                - If variable is not defined with a value then the compiler will set it to "undefined".

                Syntax:
                        var  price;
                        document.write("Price=" + price);           // Price=undefined

                - The keyword "undefined" can be used to verify value defined or not.

                Ex:
                <script>
                        var name = "Samsung TV";
                        var price;
                        if(price==undefined){
                                document.write(`Name=${name}`);
                        } else {
                        document.write(`Name=${name} <br> Price=${price}`);
                        }
                </script>

                FAQ: What is "undefined" and "not-defined"?
                Ans :
                        undefined     => is about verifying the value
                        not defined    => is about verifying the reference

                        If value not defined in a variable then it returns "undefined".
                        If a reference is not created and you try to access, then it returns "not defined".

                null type:
                ----------
                - If a reference is expecting value at run time and it is not provided, then "null" will be set.
                
                                var x;
                                document.write("x=" + x);           // x = undefined

                                var x = prompt("Enter X");
                                document.write("x=" + x);            prompt is canceled  // x= null

                Ex:
                <script>
                        var x;
                        var y = prompt("Enter value for Y");
                        if(y==null){
                                document.write("Please provide value for Y");
                        } else {
                                document.write(`X=${x} <br> Y=${y}`);
                        }
                </script>


                Ex: Good Code for Defined or Undefined

                <script>
                        var price;
                        if(price)
                        {
                                document.write("Price=" + price);
                        } else {
                                
                                document.write("Price not defined");
                        }
                </script>

                Symbol:
                ------
                        - It is a new primitive type introduced into JavaScript ES6 version.
                        - It is used to define a unique reference of every object.
                        - It is hidden over iterations but provides access if reffered individually.

                        FAQ: What is a hidden type?
                        Ans:  It is an input type in HTML that keeps data hidden in form, but can submit
                                data on request.

                                Syntax:
                                <input type="hidden"  name="UserId"  value="John_NIT">

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        </head>
                        <body>
                        <form>
                        <h3>Edit User Details</h3>
                        <dl>
                                <input type="hidden" name="UserId" value="John_NIT">
                                <dt>Name</dt>
                                <dd><input type="text" value="John" name="UserName"></dd>
                                <dt>Age</dt>
                                <dd><input type="number" value="22" name="Age"></dd>
                                <dt>Address</dt>
                                <dd><input type="text" value="Hyd" name="Address"></dd>
                        </dl>
                        <button>Save</button>
                        </form>
                        </body>
                        </html>

                                - Symbol type configure a hidden property for object

                                        var  UserId = Symbol()

                                - Symbol type can store data and provide access to data when reffered individually.

                                        var User = { 
                                                [UserId] : "John_NIT",          // hidden value
                                                UserName: "John",
                                                Age:22
                                        }
                                        document.write("UserId=" + User[UserId]);       //can access individually

                                - Symbol type is not accessible over iterations.

                                        for(var property in User)
                                        {
                                        document.write(property + "<br>");              // not accessible
                                        }                    

                        EX:
                        <script>
                                var UserId = Symbol();
                                var User = {
                                        [UserId]: "John_NIT",
                                        UserName: "John",
                                        Age: 22,
                                        City: "Hyd",
                                        Course: "Java"
                                }
                                for(var property in User){
                                document.write(property + "<br>");
                                }
                                document.write("UserId=" + User[UserId]);
                        </script>

        Non-Primitive Types:
        --------------------
        - They are mutable types.
        - Their stucture can change according to state and situation.
        - They don't have any fixed range for value.
        - The value range varies according to the memory available.
        - They are stored in memory heap. [memory heap does'nt have any order]
        - JavaScript non-primitive types are
                1. Array
                2. Object
                3. Map

                Array Type:
                -----------
                - Array's in computer programming are used to reduce overhead and complexity.
                - Array's can reduce overhead by storing values in sequential order.
                - Array's can reduce complexity by storing multiple values under one name.
                - Array's can store various types of values. 
                - Array's can change size dynamically.
                - Array is a collection/formation of sequentially arranged elements, which can be accessed in random.

                Configuring Array:
                1. Declare Array
                2. Initialize or Assign memory for Array

                - Array can be declared by using var, let or const.

                        var  products;
                        var  categories;
                        let   students;
                        const employees;    // needs initializer

                - Array memory is initialized or assigned by using 2 techniques
                        a) Array meta character        [ ]
                        b) Array Constructor          Array()

                        let  products = [ ];            // initializing memory
                                (or)    
                        let products;
                        products = [ ];                // assigning memory

                        let  products = new Array();           // initializing memory
                                (or)
                        let  products;
                        products = new Array();          // assigning memory

                FAQ: What is difference between [ ] and Array()?
                Ans:  [ ] allocates static memory for array, which is a continuous memory.
                        new Array() allocates dynamic memory for array, which is discreet memory.

                Storing Data into Array:
                ------------------------
                - You can initialize values directly into array.

                        var  values = [ 10, "A", true ];

                - You can assign values into array by using the property reference.
                - Property is a string reference that maps to the index number in memory.

                                Property    ["0"]        =>   Index [0]

                Syntax:
                        var values = [ ];
                        values[0] = 10;            // valid
                        values["1"] = 20;            // valid

                Accessing Data from Array:
                --------------------------
                - You can use the property reference of array to read any element from memory.

                Syntax:
                        document.write(values[0]);                // valid
                        document.write(values["1"]);            // valid
                
                Ex: 
                <script>
                var values = [];
                values[0] = 10;
                values["1"] = "A";
                values[2] = true;
                for(var property in values)
                {
                        document.write(`[${property}-${typeof property}] : ${values[property]}-${typeof values[property]} <br>`);
                }
                document.write(values["2"]);
                </script>

                JavaScript Array Methods:
                -------------------------
                1. Various techniques for reading elements from array

                        toString()                It returns all array elements separated with "," delimiter
                        join()                    It returns all array elements with custom delimiter.
                        slice()                   It returns the elements between specified index.
                        find()                    It returns only one element that matches the given condition.
                                                [First occurance of element in array is returned]
                        filter()                  It returns multiple elements that match the given condition.
                        map()                     It returns all array elements using an iterator. 
                        forEach()                 It returns all array elements using callback with index.

                        Note: You can use various programming statements for reading array elements.

                        for..in                    It is an iterator for reading all array properties.
                        for..of                    It is an iterator for reading all array elements [values].
                        for                        It is a loop that can access elements using index reference.
                        while, do while            These are loops with indefinite conditions.

        Ex-1: toString, join, slice
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        document.write(`
                                To String :  ${sales.toString()} <br>
                                Join      :  ${sales.join("-->")} <br>
                                Slice     :  ${sales.slice(1,2)} <br>
                        `);
                </script>

        Ex-2: Map
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        sales.map(function(value){
                                document.write(`<li>${value}</li>`);
                        })
                </script>

        Ex-3: Find and Filter
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        var result = sales.find(function(value){
                                return value<50000;
                        });
                        document.write(result);         // 34000
                </script>

                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        var result = sales.filter(function(value){
                                return value<50000;
                        });
                        document.write(result);         //34000,32000,42000
                </script>

        Ex-4: forEach
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        sales.forEach(function(value, i){
                                document.write(`${value} [${i}] <br>`);
                        })
                </script>

        Ex-5:  for loop
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        let start= 0;
                        let end = 0;
                        start = performance.now();
                        for(var i=0; i<sales.length; i++){
                                document.write(sales[i] + "<br>");
                        }
                        end = performance.now();
                        document.write(`Total Time Take to Execute Loop : ${end-start}`);
                </script>

        Ex-6: for..in
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        let start= 0;
                        let end = 0;
                        start = performance.now();
                        for(var property in sales){
                        document.write(`[${property}] : ${sales[property]} <br>`);
                        }
                        end = performance.now();
                        document.write(`Total Time Take to Execute Loop : ${end-start}`);
                </script>

                Dynamically Creating and Adding HTML Elements into Page:
                --------------------------------------------------------

                1. You have to create any element by using the method
                                
                        document.createElement("p | img | ol  | select | input | table | dd..");

                2. Assign memory reference for new element

                        let  element = document.createElement("elementName");
                    ex:    let  button = document.createElement("button");
                
                3. Set properties for button element

                        button.width
                        button.height
                        button.innerHTML ...

                4.  Add element into page by using the method  "appendChild()".

                        document.getElementById("container").appendChild(button);

                Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script>
                                function bodyload(){
                                        var btn = document.createElement("button");
                                        btn.innerHTML = "Delete";

                                        var pic = document.createElement("img");
                                        pic.src="../public/images/a1.jpg";
                                        pic.width = "200";
                                        pic.height = "200";

                                        document.getElementById("container").appendChild(pic);
                                        document.getElementById("container").appendChild(btn);
                                        
                                }
                        </script>
                </head>
                <body onload="bodyload()">
                        <div id="container">
                                <button>Insert</button>
                        </div>
                </body>
                </html>

                Presenting Array Elements in HTML Page:
                ---------------------------------------

                Ex: Ordered List

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var li = document.createElement("li");
                                li.innerHTML = value;
                                document.querySelector("ol").appendChild(li);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>

                Ex: Dropdown Items

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        for(var item of categories)
                        {
                                var option = document.createElement("option");
                                option.text = item;
                                option.value = item;
                                document.querySelector("select").appendChild(option);
                        }
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <select></select>
                </body>
                </html>

                Ex: Create Dropdown and Add Items

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        var select = document.createElement("select");
                        for(var item of categories)
                        {
                                var opt = document.createElement("option");
                                opt.text = item;
                                opt.value = item;
                                select.appendChild(opt);
                                document.querySelector("div").appendChild(select);
                        }
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <div></div>
                </body>
                </html>

                Ex: Design Table Body

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.forEach(function(value){
                                var tr = document.createElement("tr");
                                var td = document.createElement("td");
                                td.innerHTML = value;
                                tr.appendChild(td);
                                document.querySelector("tbody").appendChild(tr);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <table border="1" width="300">
                        <thead>
                        <tr>
                                <th>Category</th>
                        </tr>
                        </thead>
                        <tbody>

                        </tbody>
                </table>
                </body>
                </html>

                Ex: CheckBox List from Array

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var input = document.createElement("input");
                                input.type = "checkbox";
                                var label = document.createElement("label");
                                label.innerHTML = value;
                                var li = document.createElement("li");
                                li.appendChild(input);
                                li.appendChild(label);
                                document.querySelector("ol").appendChild(li);

                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>


                Ex: Checkbox List  without creating checkbox dynamically using createElement()

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var li = document.createElement("li");
                                li.innerHTML = `
                                <input type="checkbox"> <label>${value}</label>
                                `;
                                document.querySelector("ol").appendChild(li);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>

                Ex:  Buttons

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var button = document.createElement("button");
                                button.style.width = "200px";
                                button.innerHTML = value;
                                button.style.display = "block";
                                button.style.marginBottom = "20px";
                                document.querySelector("nav").appendChild(button);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <nav>

                </nav>
                </body>
                </html>


        FAQ: What type of data can be stored in array?
        Ans : You can store any type of data in array
                a) Primitive 
                b) Non Primitive
                c) Function
                d) Class

                Ex:
                <script>
                var values = [1, "Samsung TV", true, ["Delhi", "Hyd"], function(){ document.write("Hello ! from Array")}];
                document.write(`City-2 : ${values[3][1]}<br>`);
                values[4]();
                </script>

        Note: JavaScript ES5+ supports Array Destructure, which allows to access elements from array and store in individual references.

                Ex:
                <script>
                var values = [1, "Samsung TV", true, ["Delhi", "Hyd"], function(){ document.write("Hello ! from Array")}];
                var [id, name, stock, cities, hello] = values;

                document.write(`
                        Product Id :  ${id} <br>
                        Name : ${name} <br>
                        Stock : ${stock} <br>
                        Cities : ${cities.toString()} <br>
                `);
                hello();
                </script>

        Adding Elements into Array:
        ---------------------------

        push()              It adds new item[s] as last item.
        unshift()           It adds new item[s] as first item.
        splice()            It adds new item[s] at any specific position.

        Syntax:
        array.push("item1", "item2", ...);
        array.unshift("item", "item2", ...);
        array.splice(startIndex, deleteCount, "item1", "item2", ...);

        Ex:
        <script>
        var categories = ["Electronics", "Footwear"];
        categories.unshift("All");
        categories.push("Kids Fashion", "Men's Fashion");
        categories.splice(2,0,"Women's Fashion","Kitchen");
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        Remove Array Elements:
        ----------------------   
                pop()             It removes the last item.
                shift()           It removes the first item.
                splice()          It removes the specific item.

        Syntax:
                array.pop()
                array.shift()
                array.splice(indexNumber, deleteCount)

        Ex:
        <script>
        var categories = ["Electronics", "Footwear"];
        categories.unshift("All");
        categories.push("Kids Fashion", "Men's Fashion");
        categories.splice(2,0,"Women's Fashion","Kitchen");
        categories.shift();
        categories.pop();
        categories.splice(2,1);
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        4. Searching for element in array

        indexOf()            It returns the index number of specified element [-1 not found]
        lastIndexOf()        It returns the last occurance element index.
        find()               It returns the first element that matches given condition.
        filter()             It returns all elements that match given condition.

        5. Sorting Array Elements

        sort()               It sorts in ascending order.
        reverse()            It sorts in reverse order.(not decending order)

        Ex:
        <script>
        var categories = ["Delhi", "Mumbai", "Chennai", "Hyd", "Bangalore"];
        categories.sort();
        categories.reverse();
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        FAQ: How to delete all array elements?
        Ans :
                var values = [ "A" , "B"];
                values = [];  
                (or)
                values.length = 0;
        summary:
        --------                
        Reading Elements
        Adding Elements
        Removing Elements
        Sorting Elements
        Searching for Elements

        Ex: Array Manipulations

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Array Manipulations</title>
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <script type="text/javascript">
        let cities = ["Delhi", "Hyd"];
        function LoadCities(){
                document.getElementById("lstCities").innerHTML="";
                cities.map(function(city){
                        var option = document.createElement("option");
                        option.text = city;
                        option.value = city;
                        document.getElementById("lstCities").appendChild(option);
                })
                document.getElementById("lblCount").innerHTML = `Total No of Cities : ${cities.length}`; 
        }
        function bodyload(){
                LoadCities();
        }
        function AddClick(){
                var cityName = document.getElementById("txtCity").value;
                var cityIndex = cities.indexOf(cityName);
                if(cityIndex==-1){
                cities.push(cityName);
                alert(`${cityName} added to list`);
                LoadCities();
                document.getElementById("txtCity").value="";
                } else {
                alert(`${cityName} Exists`);
                }
                
        }
        function SortAsc(){
                cities.sort();
                LoadCities();
        }
        function SortDsc(){
                cities.sort();
                cities.reverse();
                LoadCities();
        }
        function RemoveClick(){
                
                var selectedCity = document.getElementById("lstCities").value;
                var flag = confirm(`Are you sure\n Want to Delete ${selectedCity}`);
                var selectCityIndex = cities.indexOf(selectedCity);
                if(flag==true){
                cities.splice(selectCityIndex,1);
                LoadCities();
                }
        }
        function ClearClick(){
                cities = [];
                LoadCities();
        }
        </script>
        </head>
        <body class="container-fluid" onload="bodyload()">
        <h3>Array Manipulations</h3>
        <div class="w-25">
        <div>
                <label class="form-label fw-bold">New City</label>
                <div class="input-group">
                <input type="text" id="txtCity" class="form-control"><button onclick="AddClick()" class="btn btn-primary">Add</button>
                </div>
        </div>
        <div class="mt-3">
                <label class="form-label fw-bold">Cities List</label>
                <div>
                <div class="mb-3">
                <button onclick="SortAsc()" class="btn btn-outline-success">
                        <span class="bi bi-sort-alpha-down"></span>
                </button>
                <button onclick="SortDsc()" class="btn btn-outline-info">
                        <span class="bi bi-sort-alpha-up"></span>
                </button>
                </div>
                <select class="form-select" size="3" id="lstCities">

                </select>
                <label id="lblCount" class="form-label"></label>
                </div>
                <div>
                <button onclick="RemoveClick()" class="btn btn-danger">
                <span class="bi bi-trash"></span> Remove City
                </button> 
                <button onclick="ClearClick()" class="btn btn-danger">
                <span class="bi bi-trash-fill"></span> Clear All
                </button> 
                </div>
        </div>
        </div>
        </body>
        </html>

                                        Object Type
        - Object in computer programming is used to keep all related data and logic together.
        - "Alan Kay" introduced the concept of object in to computer programming in early 1960's.
        - Object is a Key and Value collection.
        - Key is string type and Value can be any type.
        - Key and Values are defined using " : "

                "Key : value"            // value in reference of key
                "Key=value"            // invalid

        - Multiple keys and values are separated with ","

        Syntax:
                {
                "Key" : value,
                "Key" : value
                }

        Syntax:
                var obj =  { "Key": value,  "Key": value }

        - You can access the values with reference of object and key.

        Syntax:
                obj.Key            [ . ]  is member invoking operator

        - You can access the keys within object by using "this" keyword.

        Syntax:
                var obj  = {
                        "Key1": value,
                        "Key2": value,
                        this.Key1
                        }
                obj.Key1

        - If object comprises of only "data" without any logic defined, then it is reffered to as 
        "JSON" [JavaScript Object Notation]

        Ex:
        <script>
        var tv = {
                "Name": "Samsung TV",
                "Price": 35000.33,
                "Stock": true,
                "Cities": ["Delhi", "Hyd"],
                "Rating": {"Rate":4.2, "Count": 4600}
                };
                tv.Price = 56000.33;
                tv.Stock = false;
        document.write(`
                Name    : ${tv.Name} <br>
                Price   : ${tv.Price} <br>
                Stock   : ${(tv.Stock==true)?"Available":"Out of Stock"} <br>
                Cities  : ${tv.Cities.toString()} <br>
                Rating  : ${tv.Rating.Rate} [${tv.Rating.Count}]
        `);
        </script>

JavaScript Object Type:
-----------------------
- Key and Value
- Key are string and Value any
- JSON [JavaScript Object Notation]

                                Fetch Promise in JavaScript
                                ---------------------------
- Promise in JavaScript is an "Asyncrhonous" technique used to handle specific operation and return 3 phases.
        a) Initial
        b) Fullfilled
        c) Rejected
- JavaScript "fetch()" is promise that handle communication with API.
- It can fetch data from any API using in-build methods and return data to client.

        Syntax:
                fetch("url")
                .then(function(){
                executes on success
                })
                .catch(function(){
                executes on failure/ rejected
                })
                .finally(function(){ 
                executes always
                })

        Ex:
        1. Add a new folder by name "data" into project
        2. Add a new file into data folder

                "product.json"

        {
        "title": "realme C55 (Sunshower, 64GB)",
        "price": 12999,
        "rating": {"rate":4.4, "count":20600, "reviews":1200},
        "photo": "../public/images/realme1.jpg",
        "features":["4 GB RAM | 64 GB ROM | Expandable Upto 1 TB", "17.07 cm (6.72 inch) Full HD+ Display", "64MP + 2MP | 8MP Front Camera", "5000 mAh Battery","Helio G88 Processor"]
        }

        3. Add a new HTML page to present data

        index.html

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Flipkart - Mobiles</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <style>
                .product {
                display: grid;
                grid-template-columns: 3fr 6fr 3fr;
                column-gap: 20px;
                font-family: Arial;
                }
                ul {
                margin-left: -30px;
                color:gray;
                }
                li {
                margin-bottom: 20px;
                }
        </style>
        <script type="text/javascript">
                function bodyload(){
                fetch("../data/product.json")
                .then(function(response){
                        return response.json();
                })
                .then(function(product){
                        document.getElementById("lblTitle").innerHTML = product.title;
                        document.getElementById("imgProduct").src = product.photo;
                        document.getElementById("lblPrice").innerHTML = "&#8377;" + product.price;

                        product.features.map(function(item){
                        var li = document.createElement("li");
                        li.innerHTML = item;
                        document.getElementById("lstFeatures").appendChild(li);
                        })

                        document.getElementById("lblRating").innerHTML = `
                        <span>${product.rating.rate} <span class="bi bi-star-fill"></span></span>
                        <b>${product.rating.count} ratings & ${product.rating.reviews} reviews</b>
                        `;
                })
                .catch(function(err){
                        console.log(err);
                })
                }
        </script>
        </head>
        <body onload="bodyload()">
        <div class="product">
                <div>
                <img width="100%" height="300" id="imgProduct">
                </div>
                <div>
                <h2 id="lblTitle"></h2>
                <div>
                        <span id="lblRating"></span>
                </div>
                <div>
                        <ul id="lstFeatures">

                        </ul>
                </div>
                </div>
                <div>
                <h2 id="lblPrice"></h2>
                </div>
        </div>
        </body>
        </html>

- JavaScript object can define logic using functions.
- If object comprises of logic then it is not reffered as JSON.
- If object comprises of logic with data then you also call it as "Pseudo Class".

        Syntax:
                let obj = {
                        property1: value,
                        property2: value,
                        property3: function() {  },
                        property4: function() { }
                        }

        Ex:
        <script>
                var product = {
                "Name": "",
                "Price": 0,
                "Qty": 0,
                "Total": function(){
                        return this.Qty * this.Price;
                },
                "Print": function(){
                        document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}`);
                }
                }
                product.Name = prompt("Enter Name");
                product.Price = parseFloat(prompt("Enter Price"));
                product.Qty = parseInt(prompt("Enter Qty"));
                product.Print();

        </script>

                                Array of Objects
                                ----------------
        Oracle | MySql | Sql Server

        Table:
                Name            Price            Stock
                --------------------------------------------
                TV                34000.33        true
                Mobile            12000.33        false

        JSON: products
                [    
                { "Name":"TV", "Price":34000.33, "Stock":true },
                { "Name": "Mobile", "Price":12000.33, "Stock":false}
                ]

                we access Mobile Price by using 
                         ${ products[1].Price}

        Ex: Nasa API

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script type="text/javascript">
                function bodyload(){
                fetch("https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&quot;)
                .then(function(response){
                        return response.json();
                })
                .then(function(data){
                        data.photos.map(function(item){
                        var tr = document.createElement("tr");
                        var tdId = document.createElement("td");
                        var tdPhoto = document.createElement("td");
                        var tdCamera = document.createElement("td");
                        var tdRover = document.createElement("td");

                        tdId.innerHTML = item.id;
                        tdPhoto.innerHTML= `<img src=${item.img_src} width="100" height="100">`;
                        tdCamera.innerHTML = item.camera.full_name;
                        tdRover.innerHTML = item.rover.name;

                        tr.appendChild(tdId);
                        tr.appendChild(tdPhoto);
                        tr.appendChild(tdCamera);
                        tr.appendChild(tdRover);

                        document.querySelector("tbody").appendChild(tr);

                        })
                })
                }
        </script>
        </head>
        <body onload="bodyload()">
        <table width="600" border="1">
                <thead>
                <tr>
                        <th>Photo Id</th>
                        <th>Photo</th>
                        <th>Camera Name</th>
                        <th>Rover Name</th>
                </tr>
                </thead>
                <tbody>

                </tbody>
        </table>
        </body>
        </html>
        
        Fakestore API:
        --------------
        - It provides free API requests with data for ERP application.
                [Enterprise Resource Planning] - Online Shopping

        - http://fakestoreapi.com

        Request                                                        Response
        --------------------------------                               -------------      -------------------------------------
        http://fakestoreapi.com/products                               [ { }, { } ]        20 products from various categories

        http://fakestoreapi.com/products/categories                    [" ", " "]          All categories list

        http://fakestoreapi.com/products/1                             { }                 It returns specified product by id.

        http://fakestoreapi.com/products/category/electronics          [{ }, { }]         List of only electronic products.

        Ex: Shopping

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Shopper | Online Shopping</title>
        <style>
                a:link{
                color:white;
                text-decoration: none;
                }
                a:hover {
                color:yellow;
                }
        </style>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <script>
                function LoadCategories(){
                fetch("http://fakestoreapi.com/products/categories&quot;)
                .then(function(response){
                        return response.json();
                })
                .then(function(categories){
                        categories.unshift("all");
                        categories.map(function(category){
                        var option = document.createElement("option");
                        option.text = category.toUpperCase();
                        option.value = category;
                        document.getElementById("lstCategories").appendChild(option);
                        })
                })
                }

                function LoadProducts(url){
                document.querySelector("main").innerHTML="";
                fetch(url)
                .then(function(response){
                        return response.json();
                })
                .then(function(products){
                        products.map(function(product){
                        var div = document.createElement("div");
                        div.className = "card m-2 p-2";
                        div.style.width = "200px";
                        div.innerHTML = `
                        <img src=${product.image} class="card-img-top" height="140">
                        <div class="card-header overflow-auto" style="height:100px">
                                <p>${product.title}</p>
                        </div>
                        <div class="card-body">
                                <dl>
                                <dt> Price </dt>
                                <dd> ${product.price} </dd>
                                <dt> Rating </dt>
                                <dd> ${product.rating.rate} <span class="bi bi-star-fill text-success"></span> [${product.rating.count}]
                                </dl>
                        </div>
                        <div class="card-footer">
                                <button onclick="AddClick(${product.id})" class="btn btn-danger w-100">
                                <span class="bi bi-cart4"></span> Add to Cart
                                </button>
                        </div>
                        `;
                        document.querySelector("main").appendChild(div);
                        })
                })
                }

                function bodyload(){
                LoadCategories();
                LoadProducts("http://fakestoreapi.com/products&quot;);
                GetCartCount();
                }
                function CategoryChanged(){
                var categoryName = document.getElementById("lstCategories").value;
                if(categoryName=="all"){
                        LoadProducts("http://fakestoreapi.com/products&quot;);
                } else {
                LoadProducts(`http://fakestoreapi.com/products/category/${categoryName}`);
                }
                }
                function CategoryClicked(categoryName){
                if(categoryName=="all") {
                        LoadProducts("http://fakestoreapi.com/products&quot;);
                } else {
                        LoadProducts(`http://fakestoreapi.com/products/category/${categoryName}`);
                }
                }
                var CartItems = [];

                function GetCartCount(){
                document.getElementById("cartCount").innerHTML = CartItems.length;
                }

                function AddClick(id){
                fetch(`http://fakestoreapi.com/products/${id}`)
                .then(function(response){
                        return response.json();
                })
                .then(function(product){
                        CartItems.push(product);
                        alert(`${product.title}\nAdded to Cart`);
                        GetCartCount();
                })
                }
                function CartClick(){
                document.querySelector("tbody").innerHTML="";
                CartItems.map(function(product){
                        var tr = document.createElement("tr");
                        var tdTitle = document.createElement("td");
                        var tdPreview = document.createElement("td");
                        var tdPrice =document.createElement("td");

                        tdTitle.innerHTML = product.title;
                        tdPreview.innerHTML = `<img src=${product.image} width="50" height="50">`;
                        tdPrice.innerHTML = product.price;

                        tr.appendChild(tdTitle);
                        tr.appendChild(tdPreview);
                        tr.appendChild(tdPrice);

                        document.querySelector("tbody").appendChild(tr);
                })
                }
        </script>
        </head>
        <body class="container-fluid" onload="bodyload()">
        <header class="d-flex justify-content-between mt-2 bg-dark text-white p-2">
                <div>
                <h2>Shopper.</h2>
                </div>
                <div style="font-size: 20px;">
                <a class="me-3" href="javascript:CategoryClicked('all')">Home</a>
                <a class="me-3" href="javascript:CategoryClicked('electronics')">Electronics</a>
                <a class="me-3" href="javascript:CategoryClicked()">Men's Fashion</a>
                <a class="me-3" href="javascript:CategoryClicked()">Women's Fashion</a>
                <a class="me-3" href="javascript:CategoryClicked()">Jewelery</a>
                </div>
                <div>
                <span class="bi bi-person-fill"></span>
                <span class="bi bi-heart"></span>
                <button data-bs-target="#YourCart" onclick="CartClick()" data-bs-toggle="modal" class="position-relative btn btn-warning">
                        <span class="bi bi-cart4"></span> Your Cart
                        <span id="cartCount" class="badge position-absolute top-0 end-0 bg-danger rounded rounded-circle"></span>
                </button>
                <div class="modal fade" id="YourCart">
                        <div class="modal-dialog">
                        <div class="modal-content">
                                <div class="modal-header">
                                <h2 class="text-primary">Your Cart Items</h2>
                                <button class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                <table class="table table-hover">
                                        <thead>
                                        <tr>
                                                <th>Title</th>
                                                <th>Preview</th>
                                                <th>Price</th>
                                        </tr>
                                        </thead>
                                        <tbody>

                                        </tbody>
                                </table>
                                </div>
                        </div>
                        </div>
                </div>
                </div>
        </header>
        <section class="mt-3 row">
                <nav class="col-2">
                <label class="form-label fw-bold">Select Category</label>
                <div>
                <select onchange="CategoryChanged()" id="lstCategories" class="form-select">

                </select>
                </div>
                </nav>
                <main class="col-10 d-flex flex-wrap overflow-auto" style="height:500px">

                </main>
        </section>
        <script src="../node_modules/jquery/dist/jquery.js"></script>
        <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
        </body>
        </html>

        Object Manipulations:
        --------------------
        1. How to access the value of an object?
        A. You can access the value with reference of "this" keyword and property name, within
        the object.
                        Syntax:
                                this.PropertyName;
        You can access the value with object name and property name, if it is outside object.
                        Syntax:
                                objectName.propertyName;

        2. How to access all properties in object?
        A. By using "for..in" iterator

        Syntax:
                for(var property in objectName)
                {
                }

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                for(var property in product)
                {
                        document.write(property + "<br>");
                }
        </script>

        3. How to access all values?
        A. By using for..in and object-key reference.

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                for(var property in product)
                {
                        document.write(product[property] + "<br>");
                }
        </script>

        Note: You can access all keys from object from ES5+ versions using 
                "Object.Keys()"

        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                Object.keys(product).map(function(key){
                        document.write(key + "<br>");
        })
        </script>

        4. How to set the count of all keys in object?
        A. Object.keys(product).length

        5. How to check the availability of key in object?
        A. By using JavaScript "in" operator.

                "propertyName in  objectName"    => true / false

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                if("Rating" in product){
                        document.write("Rating :" + product.Rating.Rate);
                } else {
                        document.write("Rating Not Available");
                }
        </script>

        6. How to remove any property from object?
        A. By using JavaScript "delete" operator.

        Syntax:
                delete  objectName.PropertyName;

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                delete product.Price;
                document.write(`
                Name: ${product.Name} <br>
                ${(product.Price)?`Price=${product.Price}<br>`: "Price Not Available<br>"}
                Stock: ${product.Stock}
                `);
        </script>

        Note: You can't delete the properties of built-in JavaScript objects.

                delete Math.PI        => Invalid : all built-in properties are readonly.
                a) Array
                b) String
                c) Math

        7. What are the issues with Object Type?
        A. 
        - It can handle keys of only string type.
        - It uses all explicit methods to manipulate.
        - It is slow in access and manipulations.
        - You need various techniques for reading keys, values and size.

        Note: JavaScript E5+ versions introduced "Map()" type as alternative for object.


        JavaScript Map() type:
        ----------------------
        - Map is a key-value collection same as object.
        - Keys in map can be any type.
        - Value in map can be any type.
        - Map provides several implicit methods for manipulation.
        - Hence it is faster in access.

        Members:
        --------
        set()            : It is used to set a new key and value.
        get()            : It is used to read a value using key.
        keys()            : It returns all keys
        values()        : It returns all values
        entries()        : It retuens all keys and values
        has()            : It verifies the existance of a key.
        delete()        : It removes the specified key
        clear()            : It removes all keys
        size()            : It returns the count of keys

        Note: The issues with Map() is, it is a schema less collection. [structure less].

        Syntax:
                var  obj = new Map();
                obj.set("key", "value");
                obj.get("key");
                obj.delete("key");
                obj.size()
                obj.has("Key");

        Ex:
        <script>
                var topics = new Map();
                topics.set(1, "JavaScript is light weight JIT compiled Language");
                topics.set("html", "It is a markup language");
                topics.set(101, ["Delhi", "Hyd"]);

                document.write(topics.get(101) + "<br>");

                topics.delete("html");
                for(var item of topics.entries()){
                        document.write(item + "<br>");
                }
        </script>

        JavaScript Date Type:
        ---------------------
        - JavaScript date type values are handled by using "Date()" constructor.

        Syntax:
                var now  = new Date();        => It loads current date and time.
        
        - If you want specific date and time value to store then it must be defined as string with following format:

                new Date ("yyyy-mm-dd  hrs:min:sec.millSec");

        Syntax:
                var mfd = new Date("2023-04-22  17:30:46.88");

        - JavaScript provides various methods for handling date and time values.

                getHours()              : It returns hour number 0 to 23
                getMinutes()            : It returns minutes number 0 to 59
                getSeconds()            : It returns seconds number 0 to 59
                getMilliSeconds()       : It returns milliseconds number 0 to 99
                getDate()               : It returns date number
                getDay()                : It returns weekday number "0=Sunday"
                getMonth()              : It returns month number "0=January"
                getFullYear()           : It returns full year number "4 digits"
                getYear()               : It is obsolete [no-longer in use] [Y2K format of year]
                toLocaleDateString()
                toLocaleTimeString()
                toString()
        
