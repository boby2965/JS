---------------------- Java Script ------------------

--> Java Script is a light weight (Just-In-Time) JIT interepted programming language.
--> JIT is the process of translating code in browser.
--> Interpeted is the process of line-by-line translation.
--> Several technologies use JavaScript with a compiler and AOT techniques.
--> JavaScript compilers are  : Babel & V8
--> AOT means Ahead-of-Time, code is compiles at application level.

--> JavaScript is a language used in various application environments
                1) Client side          - HTML, Angular, React,Vue     **(Currently used in this course)**
                2) Server side          - NodeJS
                3) Database             - MongoDB
                4) Animations           - Flash, 3DS Max, CAD systems 

--> JavaScript supports various prgraming approaches
                1) Functional programming
                2) Structural programming
                3) Imperative programming
                4) Object Oriented Programming etc ..

Note:- JS is not an OOP language. It Just supports only few features of OOP.

----------------  JavaScript Client Side ----------------

--> JS is used on client side to reduce the burden on server.
--> It reduces round trips.
--> It can reduce burden on server by handling various interactions on client side.

--> JS is used client side with HTML for :
                1. DOM Manipulations
                2. Client Side interactions
                3. Client Side Validations

        --> DOM manipulations include 
                1. Adding element into DOM
                2. Removing element into DOM
                3. Updating data into DOM

        --> Client Side interactions include
                1. location access
                2. Navigation access
                3. History access
                4. Plugins, MIME Types etc..
        
        --> Client Side Validations is the process of verifying user input to ensure
            that contradictory and unauthorized data is not stored into Database.

------------------ Draw backs of JavaScript -------------

--> It is not a strongly typed language.
        variable x=10;          x is a number type
        x= "John";              x is a string type

--> It is not implicitly strictly typed.  (This is about Rules of programming)
        userName = "John";  (normally not valid as there is no decleration of data type) // valid in JavaScript

--> It will not support all fratures of OOP.
--> Code level security issues
--> Extensibility issues

            Solution: TypeScript (but this could not be run directly in browser)

----------------- Evolution of JavaScript --------------

--> Client side script started with ECMA script in early 1970's.
--> Internet started with browser called "Mosaic"
            Markup lang : GML
            Scripting   : ECMA script
--> 1995 Netscape Communications - Browser Netscape Communicator  (Every browser now-a-days follow this browsers Architecture)
            Markup lang : HTML
            Scripting   : ECMA Script (not suitable for latest browser)
        Netscape appointed "Brendan Eich" to develop a script for this browser 
            Script Name : Moca  => Live script 
        Netscape given the responsibility of live script to a company "Sun Microsystems"
            Sun renamed live Script => Java Script

--> 2000 Netscape stopped its services and JavaScript was given to "ECMA".
            ES2022 ==> ECMA script 2022
            ES5 => ES-2015
            ES6 => ES-2016
            ES7 => ES-2017

    HTML        --> WHATWG
    JavaScript  --> ECMA
    HTML, CSS, JavaScript : Documentation => MDN => Brendan Eich

-------------- Integration of JS into HTML ---------------

1) Inline 
2) Embedded
3) External File

Inline : 
    - It allows to write JS function directly within the element start tag
    - Script is native and faster when it is Inline
    - However t is hard to reuse and extend

    syntax: 
        <button onclick="window.print()"> Print </button>

Ebedded : 
    - JS functions are defined in a <script> container 
    - so that you can access and use from any location in page.
    - slower when compared to Inline
    - Easy to extend and reuse

    syntax : 
        <script>
        function Name()
        {

        }
        </script>

        <button onclick="Name()"> Print </button>

Note :  - The MIME type for JavaScript is "text/javascript" or "language=javascript"
        - MIME type changes according to compiler and module systems
                "text/babel"
                "text/jsx"
                "module"
        - To run the JavaScript in "strict mode" we need to use "use strict" in the <script> tag 
            <script>
                "use strict"
                document.write("Hello World");
            </script> 
        - To target JS for legacy browsers is done by enclosing the JS code in HTML comments
            <script type=text/javascript>
                <!-- 
                function PrintPage(){
                        window.print();
                }
                -->
            </script>    

External File :
    - add a new javascript file into "src/script" folder
    - add your JS function in ".js" file

                printing.js
        "usestrict"
        <!-- 
                function PrintPage(){
                        window.print();
                }
        -->
    - link JS file to HTML page 
        <script type"text/javascript" src="..src/scripts/printing.js"></script>

Note: External file for web page will increase the number of requests for page and also the page load time will increase
        - to Minify (To reduce the size of the file) - they are used in production 
                it is the process of compressing JS file
                        https://jsminify.org/  => paste your code => minify  => copy => add to "printing.min.js"

        - the minified files cannot be used in developement as they can only catch the problem but cannot report the problem
        (It cannot show where the error occured )
        
        
        
----------------    How JavaScript refers HTML elements   -------------------

1) javascript can refer html elements by DOM hierarchy

                                        BOM (Browser Object Model)

                                                window
                                                  |
                ------------------------------------------------------
                |                   |              |                |
                History         Location        Document        Navigatior      
                                                   |
                                                (index.html)
                                                    |
                                        -------------------------
                        
                                        images[]              DOM (Document Object Model)
                                        links[]
                                        forms[] ---> elements[]
                                                        button,textbox,checkbox
                                       

        syntax: 
                window.document.images[0].src="../public/images/good-morning-image-531.jpg"
                window.document.forms[0].elements[1].value="Register"
                window.document.forms[1].elements[1].value="Login"

        Note:   
                - changing the position of any element in page needs change in the code snippet.

2) JS can refer HTML elements by using their reference "name"
        syntax: 
                <img name="pic">
                <script>
                {
                        pic.src=""
                        frmRegister.btnRegister.value="Register"
                }
                </script>

        - we can't refer any child element directly. It must be accessed only with reference of it parent.              
       
                btnRegister.value="Register"                    // invalid
                frmRegister.btnRegister.value="Register"        // valid

        - "name" attribute can be common for several elements which throws an error.

                <input type="radio" name="gender" value="male">
                <input type="radio" name="gender" value="female">

3) JS can refer HTMl elements by using their "ID"
        JS provides a document method
                "document.getElementById()"
        - by using this we can get any element from any hierarchy

        syntax: 
                <img id="pic">

                {
                        document.getElementById("pic").src="";
                }
        - ID is a selector used for CSS hence JS ID reference conflicts with CSS ID.

4) JS can refer HTML elements by using Query Selectors - CSS selectors.
        - JS provides a document method 
                "document.querySelector()"

        syntax: 
        <img class="card-img-top">

        {
                document.querySelector(".card-img-top" ).src="";

        }

        <input type="submit">
        {
                document.querySelector("input[type=submit]").value= "Register";
        } 

        <input type="button" id="btnLogin">
        {
                document.querySelector("#btnLogin").value= "";
        } 

---------------------   JavaScrip Output Techniques  -----------------------

- programming languages are used to handle communication between user and the device.
- a language takes input from the user, processes the input and generates a response costumised to every request.
- output is the process of rendering result to the client.
- JS output is handled by using various properties and methods.
                1) alert()
                2) confirm()
                3) document.write()
                4) innerText
                5) innerHTML
                6) outerHTML
                7) console methods


        alert() :
                - alert is a message box that pops up from the browser window.
                - It is a member of "window" Object in BOM.
                - It can display message and seek confirmation with OK.
                - It will not allow to cancel.

                syntax:
                         alert("Your message");

                - Message can a sting or expression and only RC data type (only allows plain text content).
                syntax: 
                        alert(20+30);
                
                -If you want message in multiple lines then use "\n" for line break.
                syntax: 
                        alert("line-1 \n line-2");
                
        confirm():
                - It is a JS "window" method same as the alert() but provides cancel button
                - It is a boolean method, which returns "true" or "false".

                        true = on OK click
                        false = on Cancel click

                syntax: 
                        confirm("string |expression ");

        document.write() :
                - It is a output method that renders output in new screen.
                - It is a technique that allows a markup for presentation.

                syntax: 
                        document.write("string | expression | markup");

        innerText:
                - It is a property used for HTML elements that can display text content.
                ex: <div>, <span></span>, <p> </p>, <h2></h2>, <blockquote></blockquote>, <li></li>
                
                syntax: 
                        element.innerText="string";
                Ex:
                        document.querySelector("p").innerText="Record Deleted"
                
                - innrtText is RC dataType and will not allow Markup
                - if you are trying to render output in the same page then you can use innerText.
        
        innerHTML :
                - It is similar to innerText but allows to format "text" in the HTML by using innerHtml method.
                - You can render markup by using innerHTML.

                syntax:
                element.innerHTML= "string | expression | markup"
        
        outerHTML:
                - outerHTML is a property similar to innerHTML.
                - It can replace the existing element with new elements.
                - innerHTML will not replace elements, it can just render element with in the context of another element.
                
                syntax:
                        element.outerHTML = "string | expression | markup";


        Console Methods:
                - Every browser provides a Console
                - console is a  CLI (Command line tool) used by developers to test various languages related methods and properties.
                - console methods for output are
                        console.log()           [Contextual]
                        console.warn()
                        console.error()
                        console.info()
                        console.debug()

                syntax:
                        console.log("string | expression");
                
                - console is not for markup.
                - Multiple lines can be defined by using "\n" as line break.

-------------------- JavaScript input Techniques ------------------

- JS can take input from user by using 3 techniques
        1) Query string
        2) prompt()
        3) HTML Form input elements


        prompt():
        - It is an input box provided by Javascript "window" object.
        - It allows to input a string
        - prompt() method returns
                        null => cancel
                        string => OK
                
                syntax: 
                        prompt("Message", "default_value");
                        prompt("Message");
        
        Javascript input using Form elements:
        - HTML form provides various elements for input like 
                        textbox         checkbox
                        number          radio
                        password        color
                        range           textarea
                        email
                        url
                        file
        
        Query String:
        - Query tring is data appended into URL 
        - It is defined in browser address bar 
        - Query string is appended by using "?" and "&"
        
                syntax:
                        https://127.0.0.1:5500/page.html?name=value&name=value 

        - You can access the query string by using JavaScript "location.search"
                [location object => search property]
        
        Note:
                You need few string functions to read and extract string.
                        indexOf()       => It returns index number of any specified character.
                        slice()         => It returns the chars from specified index.
                syntax:
                        url?username=John       
                        
                        str=location.search;
                        str.slice(str.indexOf("=")+1) ;  // John 
                => query string is passed in browser as 
                        ?username=John 

-----------------    JavaScript Language Basics    -----------------
1. variables 
2. Data Types 
3. Operators 
4. Statements 
5. Functions 

        Variables:
        ----------
        - Variables are storage location in memory where you can store a value and use it as a part of any expression.
        syntax:
                <script>
                        username=prompt("Enter Your Name")
                        document.write("Hello!" + username + "<br>");
                        document.write("Hi" + username);
                </script>

        - JavaScript allows to configure a variable directly without initialization or decleration if it is not in strict mode.
                <script>
                        username= "John";                        //valid 
                        document.write=(username);
                </script>

                 <script>
                        "use strict"
                        username= "John";                        //invalid 
                        document.write=(username);
                </script>

        - In strict mode JavaScript variable must be declared or initialized.
        - Variables in JS are declared by using 3 keywords
                1) var 
                2) let  
                3) const 
        
        - Every variable configuration comprises of 3 phases 
         a) Declaration 
         b) Assignment 
         c) Initialization 

                var x;          --> Decleration 
                x = 10;         --> Assignment 
                var y=20;       --> Initialization 
                y=30;           --> Assignment  

        FAQ: What is the difference between var, let and const ?
                var:
                - It is a function scope variable.
                - A function scope variable is configured at any block(inside to outside or outside to inside block) and can be 
                  accessed from any another function.
                - It allows to configure a variable which is accessible to the current function and all its inner function.
                - The mechanism of providing access for variable to its inner function is known as "Closure". 

                syntax:
                        <script>
                                function f1(){
                                        var x;
                                        x=10;
                                        if(x==10)
                                        {
                                        var y=20;
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                        }
                                }
                                f1();
                        </script>

                        (or)

                        <script>
                                function f1(){
                                        var x;
                                        x=10;
                                        if(x==10)
                                        {
                                        var y=20;
                                        }

                                        document.write("x=" + x + "<br>" + "y=" + y );
                                }
                                f1();
                        </script>

                - It allows declaring, assignment and initialization.
                - It allows "shadowing". 
                - Shadowing is the process of re-declaring or initialization same name identifier with in the scope.
                syntax:
                        {
                                var x=10;
                                var x= 20;    // shadowing  ==> valid 
                        }

                - It allows "hoisting".
                - Hoisting is a technique followed by interpeter, where it allows to use a variable and declare or initialize later.
                There is no order in declaring and using.

                syntax:
                        <script>
                                "use strict"
                                function f1(){
                                        x=10;
                                        document.write("x=" + x);
                                        var x;              // hoisting 
                                }
                                f1();
                        </script>
                Let:
                ----
                - It is used to configure block scope variable.
                - Block scope variable is accessible within the specified block and all its inner block.
                - The members of inner block are not accessible to outer block if defined by using "let".
                - It allows declaring, assignment, and Initialization.

                syntax:
                        <script>
                                function f1(){
                                        let x;              // declaration
                                        x=10;               // assignment 
                                        if(x==10)
                                        {
                                        let y=20;       // initilization 
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                        }
                                }
                                f1();
                        </script>

                        (or)

                        <script>
                                function f1(){
                                        let x;
                                        x=10;
                                        if(x==10)
                                        {
                                        let y=20;               // not valid 
                                        
                                        }
                                        document.write("x=" + x + "<br>" + "y=" + y );
                                }

                                f1();
                        </script>
                
                - It will not allow shadowing.
                - It will not allow hoisting.
                
                const:
                ------
                - It is also block scope.
                - It allows only initialization, no declaration and no assignment.
                - It will not allow hoisting and shadowing.
                syntax:
                        <script>
                                "use strict";
                                function f1(){
                                        const x;
                                        x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>

                        <script>
                                "use strict";
                                function f1(){
                                        const x=5;
                                        x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>
                         <script>
                                "use strict";
                                function f1(){
                                        const x=5;
                                        const x=10;               // not valid 
                                        document.write("x=" + x);
                                }
                                f1();
                        </script>

                         <script>
                                "use strict";
                                function f1(){                                  
                                        document.write("x=" + x);  //not valid 
                                        const x=5;
                                }
                                f1();
                        </script>
                
        Variable Naming:
        ---------------
        - Name should not start with a number.
        - Name nust start with aplhabet.
        - it can be alpha numeric.
        - It can start with "_" special character [only in Development]
        - special characters are not recomended.
        - Name cannot have blank spaces. 
        - It can't be more than 255 chars.
        - Name must speak what it is.
        - It is better to use "camelCase" for names.
        - It cannot be a "keyword".
        
                syntax:
                -------
                        var _productName;        // this is not final, It requires further implementation.
                        var 2023_sales;         // invalid
                        var sales_2023;         // Valid

        Global Scope:
        -------------
        - It configures variable at module level.
        - So that variable is accessible to all functions in module.
        - You can declare global variables by using the key words : var, let, const

                syntax:
                -------
                        <script>
                                // Module       
                                var x=10;       ]       
                                let y=20;       ]   Global in access     
                                const z=30;     ]

                        function f1(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z + "<br>") 
                        }
                        function f2(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z  + "<br>")
                        }
                        f1();
                        f2();
                        </script>
                
        FAQ: How to define a  global variable in function?
        - By using "window" object of javaScript 

                <script>
                        
                        function f1(){
                                window.a = 100;
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z  +"<br> a=" + a) 
                        }
                        function f2(){
                                document.write("x=" + x + "<br> y=" + y + "<br> z=" + z +  "<br> a=" + a)
                        }
                        f1();
                        f2();
                </script>

Data Types:
----------
- In computer programming, Data type refers to "Data structure" [DS]
- Data structure defines "the type of data" and its "range".

        var x;    => Undefined 
- JavaScript is not a strongly typed language. You can't set restriction for type of value in a variable. 
But you can validate.
- JavaScript is an "implictly" typed language.
- The data type is determined according to the value defined.

        var x;          // Undefined 
        x=10;           // number 
        x=true;         // boolean 
        x="John"        // string 
[It is also refered to as Dynamically typed]
- JavaScript types are classified into 2 groups 
        a) Primitive Type 
        b) Non-Primitive type

        Primitive Type:
        ---------------
        - They are immutuable types. [Structure can't be changed.]
        - They have a fixed range for value.
        - The structure of value can't change.
        - They are stored in memory stack [Last in First Out]
        - Javascript Primitives types 
                a) number 
                b) string 
                c) boolean 
                d) null 
                e) undefined 
                f) symbol 
                       
                Number Type:
                ------------
                - JavaScript number type refers to numreic values which include 
                        Signed Integer                  => -6, 
                        Unsigned Integer                => 4
                        Floating point                  => 34.00                [2:2]
                        Double                          => 342.535              [3:3]
                        Decimal                         => 3567.30             [29 Decimal places]
                        Binary                          => 0b1010 
                        Hexa                            => 0fx023
                        Octa                            => 0o724
                        Bigint                          => 2n
                        Exponent                        => 2e3                 [2000] 2x10(3)
                
                - Every input from HTML is considered as "String Type", which you have to convert into number 
                by using parsing methods.
                        parseInt();
                        parseFloat();

                syntax:
                -------
                        var age = "22";
                        document.write("You will be " + (age+1) + " next year.");      // 221

                        var age = parseInt("22");
                        document.write("You will be " + (age+1) + " next year.");      //23

                        var age = parseInt("12.45");
                        document.write("You will be " + (age+1) + " next year.");      //13

                        var age = parseFloat("12.45");
                        document.write("You will be " + (age+1) + " next year.");      //13.45

                - You can validate the number input by using the function " isNAN() ".
                - isNaN is a boolean function that returns "true" when input value is not a number.
                
                syntax:
                        var age="3A";

                        if(isNaN(age)){                => true 
                                ... code ....
                        }
                - You have to convert a numeric value into "string " to apply string formats 
                - javascript numeric values are converted into a string by using "toString" function.

                        var price= 46000;                       // number 
                        var formattedPrice = price.toString;    // String 

                - JavaScript provides "Math" object to handle various mathematical operations on numeric values.
                        Math.PI 
                        Math.sqrt()
                        Math.pow()
                        Math.random()
                        Math.round()
                        Math.floor()
                        Math.ceil()
                        Math.sin()
                        Math.cos()
                        Math.tan()
                        
                String Type:
                ------------
                        - String is a literal with group characters enclosed in 
                        
                                a) Double Quotes        "    "
                                b) Single Quotes        '    '
                                c) Back Tick            `    `

                        - Single and double quotes are used to switch between inner and outer strings.

                                Syntax:
                                        var link = "<a href=' home.html '> Home </a>";

                                        var link = '<a href="home.html"> Home </a>';

                        - Backtick is available from JavaScript ES5 version.
                        - Backtick allows a string with embedded expression.
                        - It can use the new data binding expression "${ }"

                                Syntax:
                                        `your string ${expression} your string`;

                Ex:
                        <script>
                        var userName = "John";
                        var age = 22;
                        var msg1 = "Hello !" + " " + userName + " " + "you will be" + " " + (age+1) + " " + "next year.";
                        var msg2 = `Hello ! ${userName} you will be ${age+1} next year.`;
                        document.write(msg1 + "<br>" + msg2);
                        </script>

                Ex:
                        <script>
                        var title = prompt("Enter Title");
                        var uid = prompt("Enter User ID Type","Email | Mobile| UserId");
                        var uid_type = prompt("Enter User Id Input Type");
                        var buttonText = prompt("Enter Button Text");
                        var login = `
                        <h4>${title}</h4>
                        <dl>
                                <dt>${uid}</dt>
                                <dd><input type=${uid_type}></dd>
                                <dt>Password</dt>
                                <dd><input type="password"></dd>
                        </dl>
                        <button>${buttonText}</button>
                        `;
                        document.write(login);
                        </script>

                        - Several special characters in a string escape printing.
                        - You can print the non-printable characters by using escape sequence character "\".

                                Syntax:
                                        var path = "d:\images\asp.jpg";            => d:imagesasp.jpg
                                        var path = "d:\\images\\asp.jpg";        => d:\images\asp.jpg
                String Formatting:
                ------------------
                        Style Binding:
                        -------------

                        - JavaScript provides various methods and properties to format and manipulate string.
                        - JavaScript methods for formatting a string.

                        Method                Description
                        ------------------------------------------------------------------
                        bold()                    sets <b></b>
                        Italic()                    sets <i>
                        fontcolor()            sets text color
                        fontsize()                sets text size
                        strike()                strikeout
                        underline()            underline
                        sup()                    super script
                        sub()                    sub script
                        toUpperCase()        converts to uppercase
                        toLowerCase()        converts to lowercase

                                Syntax:
                                        var msg = "Welcome";
                                        document.write(msg.bold().toUpperCase().fontcolor('red'));

                        Note: RC data type elements will not allow all formats, as they are HTML elements.

                        Style Binding:
                        --------------

                        - It is the process of binding CSS attributes to HTML elements dynamically.
                        - You can format string using CSS attributes.
                        - CSS attributes are defined to any element dynamically by using "style" property.

                                Syntax:
                                        element.style.cssAttribute = value;

                        - CSS attributes are configured in "camelCase".

                                CSS Attribute            JavaScript Attribute
                                ---------------          --------------------
                                text-align              textAlign
                                background-color        backgroundColor
                                font-style              fontStyle
                                color                   color

                                Syntax:
                                        element.style.color = "red";
                                        element.style.backgroundColor="yellow";

                        Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        error.style.fontWeight = "bold";
                                        error.style.backgroundColor="yellow";
                                        error.style.width="200px";

                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                        Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        document.getElementById("txtName").style.border = "2px solid red";
                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                        Class Binding:
                        --------------
                        - You can apply a CSS class to any string or element dynamicaly.
                        - It is defined by using the attribute "className".

                                Syntax:
                                        element.className="css class1  class2";

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <style>
                                .error-style {
                                border:1px solid red;
                                box-shadow: 2px 2px 2px red;
                                }
                        </style>
                        <script type="text/javascript">
                                function ShowMessage(){
                                document.getElementById("error").innerHTML = "User name Mandatory - Block Letters".fontcolor('gold');
                                }
                                function VerifyName(){
                                var username = document.getElementById("txtName").value;
                                var error = document.getElementById("error");
                                if(username==""){
                                        error.innerHTML = "User Name Required";
                                        error.style.color = "red";
                                        document.getElementById("txtName").className = "error-style";
                                } else {
                                        error.innerHTML = "";
                                        document.getElementById("txtName").value = username.toUpperCase().bold();
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" id="txtName" onfocus="ShowMessage()" onblur="VerifyName()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                Ex: Theme for Login

                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                        <script type="text/javascript">
                                function ThemeChanged(){
                                var themeCheck = document.getElementById("theme");
                                var loginContainer = document.getElementById("loginContainer");
                                var button = document.querySelector("button");

                                if(themeCheck.checked){
                                        loginContainer.className = "border border-2 p-4 w-25 bg-dark text-white";
                                        button.className = "btn btn-light w-100";
                                } else {
                                        loginContainer.className = "border border-2 p-4 w-25";
                                        button.className = "btn btn-dark w-100";
                                }
                                }
                        </script>
                        </head>
                        <body class="container-fluid d-flex justify-content-center align-items-center" style="height:500px">
                        <div class="border border-2 p-4 w-25" id="loginContainer">
                                <div class="form-switch">
                                <input type="checkbox" id="theme" onchange="ThemeChanged()" class="form-check-input"> Dark Theme
                                </div>
                                <h2>User Login</h2>
                                <dl>
                                <dt>User Name</dt>
                                <dd><input type="text" class="form-control"></dd>
                                <dt>Password</dt>
                                <dd><input type="password" class="form-control"></dd>
                                </dl>
                                <button class="btn btn-dark w-100">Login</button>
                        </div>
                        </body>
                        </html>
                        
                String Manipulation Methods and Properties:
                -------------------------------------------

                Member                                  Description
                --------------                          ----------------------
                length                                  It returns total count of characters in a string 
                                                        syntax:
                                                                var srt = "welcome";
                                                                str.length;             // 7
                
                charAt()                                It returns the character at specified index 
                                                                var str= "welcome";
                                                                str.charAt(0);          // w 
                
                charCodeAt()                            It returns ascii code of characters at specified index 
                                                                var str ="Ajay";
                                                                str.charCodeAt(0);             // 65 
                
                indexOf()                               It returns the index number of char specified in the string. If char not 
                                                        found then it retruns "-1".
                                                                var str= "welcome";
                                                                str.indexOf("e");               // 1
                                                                str.indexOf("@");               // -1
                
                lastIndexOf()                           It returns the last occurance index number of specified char 
                                                                var str= "welcome";
                                                                str.lastIndexOf("e")            // 7

                startsWith()                            It returns a boolean true if the string starts with the specified char(s).
                endsWith()                              It returns a boolean true if the string endswith the specified char(s).
                                                                synatx:
                                                                        var str= "welcome";
                                                                        str.startsWith("w");            // true
                                                                        str.endsWith("w");              // false   

                match()                                 It is used to verify your value with any regular expression and 
                                                        return boolean true if value is matching the expression.

                                                        Regular expression in Javascript is defined within "/  /" block.

                                                                Syntax:
                                                                        var value = "david";
                                                                        var regExp = /[A-Z]{4,10}/;
                                                                        value.match(regExp)     => false

                slice()                                 It is used to extract a string between specified index.
                substr()                                It reads the specified number of chars from given index.
                substring()                             It is bi-directional in reading.

                trim()                                  It is used to remove leading spaces in a string.
                                                        Leading space includes blank space before and after the string.

                                                                Syntax:
                                                                        var  code = "   4442";
                                                                        code.trim();            // "4442"
                
                split()                                 It splits the string into an array. It identifies the delimeter [separator]
                                                        and splits the string into multiple elements.
                                                        The result is a array of strings.

                                                                Syntax:
                                                                        var str = "A, B";
                                                                        result= str.split(',');        // result [0] = A
                                                                                                        // result [1] = B                                                                      
                        Ex:
                        <script>
                                var contacts = "john-9993828812, david-8883727172";
                                var result = contacts.split(',');
                                document.write(`${result[0]} <br> ${result[1]}`);
                        </script>

                        Ex:
                        <script>
                                var contacts = "john-9993828812, david-8883727172";
                                var [john, david] = contacts.split(',');
                                document.write(john + "<br>" + david);
                        </script>        

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                                <meta charset="UTF-8">
                                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <title>Document</title>
                                <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                                <script type="text/javascript">
                                        function VerifyCard(){
                                        var card = document.getElementById("txtCard").value;
                                        var img = document.getElementById("imgCard");
                                        if(card.startsWith("4455")) {
                                                img.src = "../public/images/visa.png";
                                        } else {
                                                img.src = "../public/images/master.png";
                                        }
                                        }
                                        function VerifySkype(){
                                        var skype = document.getElementById("txtSkype").value;
                                        var error = document.getElementById("error");
                                        if(skype.endsWith("outlook.com")) {
                                                error.innerHTML ="";
                                        } else {
                                                error.innerHTML ="Invalid Skype Id".fontcolor('red');
                                        }
                                        }
                                </script>
                        </head>
                        <body class="container-fluid">
                                <dl class="mt-2 w-25">
                                        <dt>Your Card Number</dt>
                                        <dd class="input-group"><input type="text" onblur="VerifyCard()" class="form-control" id="txtCard"><img id="imgCard" height="40" class="input-group-text"></dd>
                                        <dt>Your Skype Id</dt>
                                        <dd>
                                        <input type="text" class="form-control" id="txtSkype" onblur="VerifySkype()">
                                        </dd>
                                        <dd id="error"></dd>
                                </dl>
                        </body>
                        </html>
                        
                        FAQ: What is difference between slice, substr and substring methods ?
                        Ans:

                        1. slice    : It refers the chars between start and end index.
                                        End index number is optional.
                                        If end index is defined then it must be greater than start index.
                        Syntax:
                                slice(startIndex, endIndex);
                                slice(4);                           4 to end
                                slice(4,16);                        4 to 16 index
                                slice(4,0);                         invalid
                                slice(4,2);                         invalid

                        2. substr    : It defines the number of chars to read from specified index.
                                        It can't have any index reference defined bi-directional.

                        Syntax:
                                substr(startIndex, countOfCharsToRead);
                                substr(4, 3);                   => reads 3 chars from 4 index
                                substr(4);                      => reads all chars upto end from 4 index
                                substr(4,0);                    => no value returned
                                
                        3. substring:  It defines the chars between specified index bi-directional.

                        Syntax:
                                substring(7)                    => reads from 7 index to end
                                substring(7,0)                  => reads from 7 to 0 index [start]
                                substring(7, 14)                => reads from 7 index to 14 index

                        Ex:
                        <script>
                                var msg = "Welcome to JavaScript";
                                document.write(msg.slice(7,0) + "<br>");
                                document.write(msg.substr(7,0) + "<br>");
                                document.write(msg.substring(7,0));
                        </script>

                        Ex:

                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script type="text/javascript">
                                function VerifyOTP(){
                                var otp = document.getElementById("txtOTP").value;
                                var error = document.getElementById("error");
                                if(otp.trim()=="4424"){
                                        error.innerHTML = "OTP Verified".fontcolor('green');
                                } else {
                                        error.innerHTML = "Invalid OTP".fontcolor('red');
                                }
                                }
                        </script>
                        </head>
                        <body>
                        <dl>
                                <dt>Your OTP</dt>
                                <dd><input type="text" id="txtOTP" onblur="VerifyOTP()"></dd>
                                <dd id="error"></dd>
                        </dl>
                        </body>
                        </html>

                Boolean Type:
                -------------
                - Boolean types are used in decision making.
                - JavaScript boolean types can handle 2 values "true" & "false".
                - JavaScript boolean value can compare with 1 & 0.

                                true = 1
                                false = 0
                syntax:
                        var x = 1;            // number
                        var x = true;        // boolean
                        if(x==1) {            // true - not good
                
                        }
                        if(x==true) {        // true - good 

                        }

                Ex:
                        <script>
                                var stock = false;
                                if(stock==1){
                                        document.write("Available");
                                } else {
                                        document.write("Out of Stock");
                                }
                        </script>

                       
                        FAQ:
                                true + true =  ?        // 2
                                true + 2     =  ?       // 3
                                true + "A"     =  ?     // trueA
                                true + false = ?        // 1

                        Which HTML Attributes are boolean type?
                                -disabled            <button  disabled>        element.disabled = false;
                                -readonly
                                -required
                                -checked 

                Ex: Toggle Button

                Undefined type:
                ---------------
                - JavaScript is implicitly typed.
                - The data type of variable is determined according to the value defined.
                - If variable is not defined with a value then the compiler will set it to "undefined".

                Syntax:
                        var  price;
                        document.write("Price=" + price);           // Price=undefined

                - The keyword "undefined" can be used to verify value defined or not.

                Ex:
                <script>
                        var name = "Samsung TV";
                        var price;
                        if(price==undefined){
                                document.write(`Name=${name}`);
                        } else {
                        document.write(`Name=${name} <br> Price=${price}`);
                        }
                </script>

                FAQ: What is "undefined" and "not-defined"?
                Ans :
                        undefined     => is about verifying the value
                        not defined    => is about verifying the reference

                        If value not defined in a variable then it returns "undefined".
                        If a reference is not created and you try to access, then it returns "not defined".

                null type:
                ----------
                - If a reference is expecting value at run time and it is not provided, then "null" will be set.
                
                                var x;
                                document.write("x=" + x);           // x = undefined

                                var x = prompt("Enter X");
                                document.write("x=" + x);            prompt is canceled  // x= null

                Ex:
                <script>
                        var x;
                        var y = prompt("Enter value for Y");
                        if(y==null){
                                document.write("Please provide value for Y");
                        } else {
                                document.write(`X=${x} <br> Y=${y}`);
                        }
                </script>


                Ex: Good Code for Defined or Undefined

                <script>
                        var price;
                        if(price)
                        {
                                document.write("Price=" + price);
                        } else {
                                
                                document.write("Price not defined");
                        }
                </script>

                Symbol:
                ------
                        - It is a new primitive type introduced into JavaScript ES6 version.
                        - It is used to define a unique reference of every object.
                        - It is hidden over iterations but provides access if reffered individually.

                        FAQ: What is a hidden type?
                        Ans:  It is an input type in HTML that keeps data hidden in form, but can submit
                                data on request.

                                Syntax:
                                <input type="hidden"  name="UserId"  value="John_NIT">

                Ex:
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        </head>
                        <body>
                        <form>
                        <h3>Edit User Details</h3>
                        <dl>
                                <input type="hidden" name="UserId" value="John_NIT">
                                <dt>Name</dt>
                                <dd><input type="text" value="John" name="UserName"></dd>
                                <dt>Age</dt>
                                <dd><input type="number" value="22" name="Age"></dd>
                                <dt>Address</dt>
                                <dd><input type="text" value="Hyd" name="Address"></dd>
                        </dl>
                        <button>Save</button>
                        </form>
                        </body>
                        </html>

                                - Symbol type configure a hidden property for object

                                        var  UserId = Symbol()

                                - Symbol type can store data and provide access to data when reffered individually.

                                        var User = { 
                                                [UserId] : "John_NIT",          // hidden value
                                                UserName: "John",
                                                Age:22
                                        }
                                        document.write("UserId=" + User[UserId]);       //can access individually

                                - Symbol type is not accessible over iterations.

                                        for(var property in User)
                                        {
                                        document.write(property + "<br>");              // not accessible
                                        }                    

                        EX:
                        <script>
                                var UserId = Symbol();
                                var User = {
                                        [UserId]: "John_NIT",
                                        UserName: "John",
                                        Age: 22,
                                        City: "Hyd",
                                        Course: "Java"
                                }
                                for(var property in User){
                                document.write(property + "<br>");
                                }
                                document.write("UserId=" + User[UserId]);
                        </script>

        Non-Primitive Types:
        --------------------
        - They are mutable types.
        - Their stucture can change according to state and situation.
        - They don't have any fixed range for value.
        - The value range varies according to the memory available.
        - They are stored in memory heap. [memory heap does'nt have any order]
        - JavaScript non-primitive types are
                1. Array
                2. Object
                3. Map

                Array Type:
                -----------
                - Array's in computer programming are used to reduce overhead and complexity.
                - Array's can reduce overhead by storing values in sequential order.
                - Array's can reduce complexity by storing multiple values under one name.
                - Array's can store various types of values. 
                - Array's can change size dynamically.
                - Array is a collection/formation of sequentially arranged elements, which can be accessed in random.

                Configuring Array:
                1. Declare Array
                2. Initialize or Assign memory for Array

                - Array can be declared by using var, let or const.

                        var  products;
                        var  categories;
                        let   students;
                        const employees;    // needs initializer

                - Array memory is initialized or assigned by using 2 techniques
                        a) Array meta character        [ ]
                        b) Array Constructor          Array()

                        let  products = [ ];            // initializing memory
                                (or)    
                        let products;
                        products = [ ];                // assigning memory

                        let  products = new Array();           // initializing memory
                                (or)
                        let  products;
                        products = new Array();          // assigning memory

                FAQ: What is difference between [ ] and Array()?
                Ans:  [ ] allocates static memory for array, which is a continuous memory.
                        new Array() allocates dynamic memory for array, which is discreet memory.

                Storing Data into Array:
                ------------------------
                - You can initialize values directly into array.

                        var  values = [ 10, "A", true ];

                - You can assign values into array by using the property reference.
                - Property is a string reference that maps to the index number in memory.

                                Property    ["0"]        =>   Index [0]

                Syntax:
                        var values = [ ];
                        values[0] = 10;            // valid
                        values["1"] = 20;            // valid

                Accessing Data from Array:
                --------------------------
                - You can use the property reference of array to read any element from memory.

                Syntax:
                        document.write(values[0]);                // valid
                        document.write(values["1"]);            // valid
                
                Ex: 
                <script>
                var values = [];
                values[0] = 10;
                values["1"] = "A";
                values[2] = true;
                for(var property in values)
                {
                        document.write(`[${property}-${typeof property}] : ${values[property]}-${typeof values[property]} <br>`);
                }
                document.write(values["2"]);
                </script>

                JavaScript Array Methods:
                -------------------------
                1. Various techniques for reading elements from array

                        toString()                It returns all array elements separated with "," delimiter
                        join()                    It returns all array elements with custom delimiter.
                        slice()                   It returns the elements between specified index.
                        find()                    It returns only one element that matches the given condition.
                                                [First occurance of element in array is returned]
                        filter()                  It returns multiple elements that match the given condition.
                        map()                     It returns all array elements using an iterator. 
                        forEach()                 It returns all array elements using callback with index.

                        Note: You can use various programming statements for reading array elements.

                        for..in                    It is an iterator for reading all array properties.
                        for..of                    It is an iterator for reading all array elements [values].
                        for                        It is a loop that can access elements using index reference.
                        while, do while            These are loops with indefinite conditions.

        Ex-1: toString, join, slice
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        document.write(`
                                To String :  ${sales.toString()} <br>
                                Join      :  ${sales.join("-->")} <br>
                                Slice     :  ${sales.slice(1,2)} <br>
                        `);
                </script>

        Ex-2: Map
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        sales.map(function(value){
                                document.write(`<li>${value}</li>`);
                        })
                </script>

        Ex-3: Find and Filter
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        var result = sales.find(function(value){
                                return value<50000;
                        });
                        document.write(result);         // 34000
                </script>

                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        var result = sales.filter(function(value){
                                return value<50000;
                        });
                        document.write(result);         //34000,32000,42000
                </script>

        Ex-4: forEach
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        sales.forEach(function(value, i){
                                document.write(`${value} [${i}] <br>`);
                        })
                </script>

        Ex-5:  for loop
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        let start= 0;
                        let end = 0;
                        start = performance.now();
                        for(var i=0; i<sales.length; i++){
                                document.write(sales[i] + "<br>");
                        }
                        end = performance.now();
                        document.write(`Total Time Take to Execute Loop : ${end-start}`);
                </script>

        Ex-6: for..in
                <script>
                        var sales = [34000, 32000, 67000, 42000, 57000];
                        let start= 0;
                        let end = 0;
                        start = performance.now();
                        for(var property in sales){
                        document.write(`[${property}] : ${sales[property]} <br>`);
                        }
                        end = performance.now();
                        document.write(`Total Time Take to Execute Loop : ${end-start}`);
                </script>

                Dynamically Creating and Adding HTML Elements into Page:
                --------------------------------------------------------

                1. You have to create any element by using the method
                                
                        document.createElement("p | img | ol  | select | input | table | dd..");

                2. Assign memory reference for new element

                        let  element = document.createElement("elementName");
                    ex:    let  button = document.createElement("button");
                
                3. Set properties for button element

                        button.width
                        button.height
                        button.innerHTML ...

                4.  Add element into page by using the method  "appendChild()".

                        document.getElementById("container").appendChild(button);

                Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Document</title>
                        <script>
                                function bodyload(){
                                        var btn = document.createElement("button");
                                        btn.innerHTML = "Delete";

                                        var pic = document.createElement("img");
                                        pic.src="../public/images/a1.jpg";
                                        pic.width = "200";
                                        pic.height = "200";

                                        document.getElementById("container").appendChild(pic);
                                        document.getElementById("container").appendChild(btn);
                                        
                                }
                        </script>
                </head>
                <body onload="bodyload()">
                        <div id="container">
                                <button>Insert</button>
                        </div>
                </body>
                </html>

                Presenting Array Elements in HTML Page:
                ---------------------------------------

                Ex: Ordered List

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var li = document.createElement("li");
                                li.innerHTML = value;
                                document.querySelector("ol").appendChild(li);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>

                Ex: Dropdown Items

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        for(var item of categories)
                        {
                                var option = document.createElement("option");
                                option.text = item;
                                option.value = item;
                                document.querySelector("select").appendChild(option);
                        }
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <select></select>
                </body>
                </html>

                Ex: Create Dropdown and Add Items

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        var select = document.createElement("select");
                        for(var item of categories)
                        {
                                var opt = document.createElement("option");
                                opt.text = item;
                                opt.value = item;
                                select.appendChild(opt);
                                document.querySelector("div").appendChild(select);
                        }
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <div></div>
                </body>
                </html>

                Ex: Design Table Body

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.forEach(function(value){
                                var tr = document.createElement("tr");
                                var td = document.createElement("td");
                                td.innerHTML = value;
                                tr.appendChild(td);
                                document.querySelector("tbody").appendChild(tr);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <table border="1" width="300">
                        <thead>
                        <tr>
                                <th>Category</th>
                        </tr>
                        </thead>
                        <tbody>

                        </tbody>
                </table>
                </body>
                </html>

                Ex: CheckBox List from Array

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var input = document.createElement("input");
                                input.type = "checkbox";
                                var label = document.createElement("label");
                                label.innerHTML = value;
                                var li = document.createElement("li");
                                li.appendChild(input);
                                li.appendChild(label);
                                document.querySelector("ol").appendChild(li);

                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>


                Ex: Checkbox List  without creating checkbox dynamically using createElement()

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var li = document.createElement("li");
                                li.innerHTML = `
                                <input type="checkbox"> <label>${value}</label>
                                `;
                                document.querySelector("ol").appendChild(li);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <ol>

                </ol>
                </body>
                </html>

                Ex:  Buttons

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Arrays</title>
                <script type="text/javascript">
                        var categories = ["All","Electronics", "Footwear", "Kids Fashion"];
                        function bodyload(){
                        categories.map(function(value){
                                var button = document.createElement("button");
                                button.style.width = "200px";
                                button.innerHTML = value;
                                button.style.display = "block";
                                button.style.marginBottom = "20px";
                                document.querySelector("nav").appendChild(button);
                        })
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <h3>Categories List</h3>
                <nav>

                </nav>
                </body>
                </html>


        FAQ: What type of data can be stored in array?
        Ans : You can store any type of data in array
                a) Primitive 
                b) Non Primitive
                c) Function
                d) Class

                Ex:
                <script>
                var values = [1, "Samsung TV", true, ["Delhi", "Hyd"], function(){ document.write("Hello ! from Array")}];
                document.write(`City-2 : ${values[3][1]}<br>`);
                values[4]();
                </script>

        Note: JavaScript ES5+ supports Array Destructure, which allows to access elements from array and store in individual references.

                Ex:
                <script>
                var values = [1, "Samsung TV", true, ["Delhi", "Hyd"], function(){ document.write("Hello ! from Array")}];
                var [id, name, stock, cities, hello] = values;

                document.write(`
                        Product Id :  ${id} <br>
                        Name : ${name} <br>
                        Stock : ${stock} <br>
                        Cities : ${cities.toString()} <br>
                `);
                hello();
                </script>

        Adding Elements into Array:
        ---------------------------

        push()              It adds new item[s] as last item.
        unshift()           It adds new item[s] as first item.
        splice()            It adds new item[s] at any specific position.

        Syntax:
        array.push("item1", "item2", ...);
        array.unshift("item", "item2", ...);
        array.splice(startIndex, deleteCount, "item1", "item2", ...);

        Ex:
        <script>
        var categories = ["Electronics", "Footwear"];
        categories.unshift("All");
        categories.push("Kids Fashion", "Men's Fashion");
        categories.splice(2,0,"Women's Fashion","Kitchen");
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        Remove Array Elements:
        ----------------------   
                pop()             It removes the last item.
                shift()           It removes the first item.
                splice()          It removes the specific item.

        Syntax:
                array.pop()
                array.shift()
                array.splice(indexNumber, deleteCount)

        Ex:
        <script>
        var categories = ["Electronics", "Footwear"];
        categories.unshift("All");
        categories.push("Kids Fashion", "Men's Fashion");
        categories.splice(2,0,"Women's Fashion","Kitchen");
        categories.shift();
        categories.pop();
        categories.splice(2,1);
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        4. Searching for element in array

        indexOf()            It returns the index number of specified element [-1 not found]
        lastIndexOf()        It returns the last occurance element index.
        find()               It returns the first element that matches given condition.
        filter()             It returns all elements that match given condition.

        5. Sorting Array Elements

        sort()               It sorts in ascending order.
        reverse()            It sorts in reverse order.(not decending order)

        Ex:
        <script>
        var categories = ["Delhi", "Mumbai", "Chennai", "Hyd", "Bangalore"];
        categories.sort();
        categories.reverse();
        for(var property in categories)
        {
                document.write(`[${property}]-${categories[property]}<br>`);
        }
        </script>

        FAQ: How to delete all array elements?
        Ans :
                var values = [ "A" , "B"];
                values = [];  
                (or)
                values.length = 0;
        summary:
        --------                
        Reading Elements
        Adding Elements
        Removing Elements
        Sorting Elements
        Searching for Elements

        Ex: Array Manipulations

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Array Manipulations</title>
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <script type="text/javascript">
        let cities = ["Delhi", "Hyd"];
        function LoadCities(){
                document.getElementById("lstCities").innerHTML="";
                cities.map(function(city){
                        var option = document.createElement("option");
                        option.text = city;
                        option.value = city;
                        document.getElementById("lstCities").appendChild(option);
                })
                document.getElementById("lblCount").innerHTML = `Total No of Cities : ${cities.length}`; 
        }
        function bodyload(){
                LoadCities();
        }
        function AddClick(){
                var cityName = document.getElementById("txtCity").value;
                var cityIndex = cities.indexOf(cityName);
                if(cityIndex==-1){
                cities.push(cityName);
                alert(`${cityName} added to list`);
                LoadCities();
                document.getElementById("txtCity").value="";
                } else {
                alert(`${cityName} Exists`);
                }
                
        }
        function SortAsc(){
                cities.sort();
                LoadCities();
        }
        function SortDsc(){
                cities.sort();
                cities.reverse();
                LoadCities();
        }
        function RemoveClick(){
                
                var selectedCity = document.getElementById("lstCities").value;
                var flag = confirm(`Are you sure\n Want to Delete ${selectedCity}`);
                var selectCityIndex = cities.indexOf(selectedCity);
                if(flag==true){
                cities.splice(selectCityIndex,1);
                LoadCities();
                }
        }
        function ClearClick(){
                cities = [];
                LoadCities();
        }
        </script>
        </head>
        <body class="container-fluid" onload="bodyload()">
        <h3>Array Manipulations</h3>
        <div class="w-25">
        <div>
                <label class="form-label fw-bold">New City</label>
                <div class="input-group">
                <input type="text" id="txtCity" class="form-control"><button onclick="AddClick()" class="btn btn-primary">Add</button>
                </div>
        </div>
        <div class="mt-3">
                <label class="form-label fw-bold">Cities List</label>
                <div>
                <div class="mb-3">
                <button onclick="SortAsc()" class="btn btn-outline-success">
                        <span class="bi bi-sort-alpha-down"></span>
                </button>
                <button onclick="SortDsc()" class="btn btn-outline-info">
                        <span class="bi bi-sort-alpha-up"></span>
                </button>
                </div>
                <select class="form-select" size="3" id="lstCities">

                </select>
                <label id="lblCount" class="form-label"></label>
                </div>
                <div>
                <button onclick="RemoveClick()" class="btn btn-danger">
                <span class="bi bi-trash"></span> Remove City
                </button> 
                <button onclick="ClearClick()" class="btn btn-danger">
                <span class="bi bi-trash-fill"></span> Clear All
                </button> 
                </div>
        </div>
        </div>
        </body>
        </html>

                                        Object Type
        - Object in computer programming is used to keep all related data and logic together.
        - "Alan Kay" introduced the concept of object in to computer programming in early 1960's.
        - Object is a Key and Value collection.
        - Key is string type and Value can be any type.
        - Key and Values are defined using " : "

                "Key : value"            // value in reference of key
                "Key=value"            // invalid

        - Multiple keys and values are separated with ","

        Syntax:
                {
                "Key" : value,
                "Key" : value
                }

        Syntax:
                var obj =  { "Key": value,  "Key": value }

        - You can access the values with reference of object and key.

        Syntax:
                obj.Key            [ . ]  is member invoking operator

        - You can access the keys within object by using "this" keyword.

        Syntax:
                var obj  = {
                        "Key1": value,
                        "Key2": value,
                        this.Key1
                        }
                obj.Key1

        - If object comprises of only "data" without any logic defined, then it is reffered to as 
        "JSON" [JavaScript Object Notation]

        Ex:
        <script>
        var tv = {
                "Name": "Samsung TV",
                "Price": 35000.33,
                "Stock": true,
                "Cities": ["Delhi", "Hyd"],
                "Rating": {"Rate":4.2, "Count": 4600}
                };
                tv.Price = 56000.33;
                tv.Stock = false;
        document.write(`
                Name    : ${tv.Name} <br>
                Price   : ${tv.Price} <br>
                Stock   : ${(tv.Stock==true)?"Available":"Out of Stock"} <br>
                Cities  : ${tv.Cities.toString()} <br>
                Rating  : ${tv.Rating.Rate} [${tv.Rating.Count}]
        `);
        </script>

JavaScript Object Type:
-----------------------
- Key and Value
- Key are string and Value any
- JSON [JavaScript Object Notation]

                                Fetch Promise in JavaScript
                                ---------------------------
- Promise in JavaScript is an "Asyncrhonous" technique used to handle specific operation and return 3 phases.
        a) Initial
        b) Fullfilled
        c) Rejected
- JavaScript "fetch()" is promise that handle communication with API.
- It can fetch data from any API using in-build methods and return data to client.

        Syntax:
                fetch("url")
                .then(function(){
                executes on success
                })
                .catch(function(){
                executes on failure/ rejected
                })
                .finally(function(){ 
                executes always
                })

        Ex:
        1. Add a new folder by name "data" into project
        2. Add a new file into data folder

                "product.json"

        {
        "title": "realme C55 (Sunshower, 64GB)",
        "price": 12999,
        "rating": {"rate":4.4, "count":20600, "reviews":1200},
        "photo": "../public/images/realme1.jpg",
        "features":["4 GB RAM | 64 GB ROM | Expandable Upto 1 TB", "17.07 cm (6.72 inch) Full HD+ Display", "64MP + 2MP | 8MP Front Camera", "5000 mAh Battery","Helio G88 Processor"]
        }

        3. Add a new HTML page to present data

        index.html

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Flipkart - Mobiles</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <style>
                .product {
                display: grid;
                grid-template-columns: 3fr 6fr 3fr;
                column-gap: 20px;
                font-family: Arial;
                }
                ul {
                margin-left: -30px;
                color:gray;
                }
                li {
                margin-bottom: 20px;
                }
        </style>
        <script type="text/javascript">
                function bodyload(){
                fetch("../data/product.json")
                .then(function(response){
                        return response.json();
                })
                .then(function(product){
                        document.getElementById("lblTitle").innerHTML = product.title;
                        document.getElementById("imgProduct").src = product.photo;
                        document.getElementById("lblPrice").innerHTML = "&#8377;" + product.price;

                        product.features.map(function(item){
                        var li = document.createElement("li");
                        li.innerHTML = item;
                        document.getElementById("lstFeatures").appendChild(li);
                        })

                        document.getElementById("lblRating").innerHTML = `
                        <span>${product.rating.rate} <span class="bi bi-star-fill"></span></span>
                        <b>${product.rating.count} ratings & ${product.rating.reviews} reviews</b>
                        `;
                })
                .catch(function(err){
                        console.log(err);
                })
                }
        </script>
        </head>
        <body onload="bodyload()">
        <div class="product">
                <div>
                <img width="100%" height="300" id="imgProduct">
                </div>
                <div>
                <h2 id="lblTitle"></h2>
                <div>
                        <span id="lblRating"></span>
                </div>
                <div>
                        <ul id="lstFeatures">

                        </ul>
                </div>
                </div>
                <div>
                <h2 id="lblPrice"></h2>
                </div>
        </div>
        </body>
        </html>

- JavaScript object can define logic using functions.
- If object comprises of logic then it is not reffered as JSON.
- If object comprises of logic with data then you also call it as "Pseudo Class".

        Syntax:
                let obj = {
                        property1: value,
                        property2: value,
                        property3: function() {  },
                        property4: function() { }
                        }

        Ex:
        <script>
                var product = {
                "Name": "",
                "Price": 0,
                "Qty": 0,
                "Total": function(){
                        return this.Qty * this.Price;
                },
                "Print": function(){
                        document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}`);
                }
                }
                product.Name = prompt("Enter Name");
                product.Price = parseFloat(prompt("Enter Price"));
                product.Qty = parseInt(prompt("Enter Qty"));
                product.Print();

        </script>

                                Array of Objects
                                ----------------
        Oracle | MySql | Sql Server

        Table:
                Name            Price            Stock
                --------------------------------------------
                TV                34000.33        true
                Mobile            12000.33        false

        JSON: products
                [    
                { "Name":"TV", "Price":34000.33, "Stock":true },
                { "Name": "Mobile", "Price":12000.33, "Stock":false}
                ]

                we access Mobile Price by using 
                         ${ products[1].Price}

        Ex: Nasa API

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script type="text/javascript">
                function bodyload(){
                fetch("https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&quot;)
                .then(function(response){
                        return response.json();
                })
                .then(function(data){
                        data.photos.map(function(item){
                        var tr = document.createElement("tr");
                        var tdId = document.createElement("td");
                        var tdPhoto = document.createElement("td");
                        var tdCamera = document.createElement("td");
                        var tdRover = document.createElement("td");

                        tdId.innerHTML = item.id;
                        tdPhoto.innerHTML= `<img src=${item.img_src} width="100" height="100">`;
                        tdCamera.innerHTML = item.camera.full_name;
                        tdRover.innerHTML = item.rover.name;

                        tr.appendChild(tdId);
                        tr.appendChild(tdPhoto);
                        tr.appendChild(tdCamera);
                        tr.appendChild(tdRover);

                        document.querySelector("tbody").appendChild(tr);

                        })
                })
                }
        </script>
        </head>
        <body onload="bodyload()">
        <table width="600" border="1">
                <thead>
                <tr>
                        <th>Photo Id</th>
                        <th>Photo</th>
                        <th>Camera Name</th>
                        <th>Rover Name</th>
                </tr>
                </thead>
                <tbody>

                </tbody>
        </table>
        </body>
        </html>
        
        Fakestore API:
        --------------
        - It provides free API requests with data for ERP application.
                [Enterprise Resource Planning] - Online Shopping

        - http://fakestoreapi.com

        Request                                                        Response
        --------------------------------                               -------------      -------------------------------------
        http://fakestoreapi.com/products                               [ { }, { } ]        20 products from various categories

        http://fakestoreapi.com/products/categories                    [" ", " "]          All categories list

        http://fakestoreapi.com/products/1                             { }                 It returns specified product by id.

        http://fakestoreapi.com/products/category/electronics          [{ }, { }]         List of only electronic products.

        Ex: Shopping

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Shopper | Online Shopping</title>
        <style>
                a:link{
                color:white;
                text-decoration: none;
                }
                a:hover {
                color:yellow;
                }
        </style>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <script>
                function LoadCategories(){
                fetch("http://fakestoreapi.com/products/categories&quot;)
                .then(function(response){
                        return response.json();
                })
                .then(function(categories){
                        categories.unshift("all");
                        categories.map(function(category){
                        var option = document.createElement("option");
                        option.text = category.toUpperCase();
                        option.value = category;
                        document.getElementById("lstCategories").appendChild(option);
                        })
                })
                }

                function LoadProducts(url){
                document.querySelector("main").innerHTML="";
                fetch(url)
                .then(function(response){
                        return response.json();
                })
                .then(function(products){
                        products.map(function(product){
                        var div = document.createElement("div");
                        div.className = "card m-2 p-2";
                        div.style.width = "200px";
                        div.innerHTML = `
                        <img src=${product.image} class="card-img-top" height="140">
                        <div class="card-header overflow-auto" style="height:100px">
                                <p>${product.title}</p>
                        </div>
                        <div class="card-body">
                                <dl>
                                <dt> Price </dt>
                                <dd> ${product.price} </dd>
                                <dt> Rating </dt>
                                <dd> ${product.rating.rate} <span class="bi bi-star-fill text-success"></span> [${product.rating.count}]
                                </dl>
                        </div>
                        <div class="card-footer">
                                <button onclick="AddClick(${product.id})" class="btn btn-danger w-100">
                                <span class="bi bi-cart4"></span> Add to Cart
                                </button>
                        </div>
                        `;
                        document.querySelector("main").appendChild(div);
                        })
                })
                }

                function bodyload(){
                LoadCategories();
                LoadProducts("http://fakestoreapi.com/products&quot;);
                GetCartCount();
                }
                function CategoryChanged(){
                var categoryName = document.getElementById("lstCategories").value;
                if(categoryName=="all"){
                        LoadProducts("http://fakestoreapi.com/products&quot;);
                } else {
                LoadProducts(`http://fakestoreapi.com/products/category/${categoryName}`);
                }
                }
                function CategoryClicked(categoryName){
                if(categoryName=="all") {
                        LoadProducts("http://fakestoreapi.com/products&quot;);
                } else {
                        LoadProducts(`http://fakestoreapi.com/products/category/${categoryName}`);
                }
                }
                var CartItems = [];

                function GetCartCount(){
                document.getElementById("cartCount").innerHTML = CartItems.length;
                }

                function AddClick(id){
                fetch(`http://fakestoreapi.com/products/${id}`)
                .then(function(response){
                        return response.json();
                })
                .then(function(product){
                        CartItems.push(product);
                        alert(`${product.title}\nAdded to Cart`);
                        GetCartCount();
                })
                }
                function CartClick(){
                document.querySelector("tbody").innerHTML="";
                CartItems.map(function(product){
                        var tr = document.createElement("tr");
                        var tdTitle = document.createElement("td");
                        var tdPreview = document.createElement("td");
                        var tdPrice =document.createElement("td");

                        tdTitle.innerHTML = product.title;
                        tdPreview.innerHTML = `<img src=${product.image} width="50" height="50">`;
                        tdPrice.innerHTML = product.price;

                        tr.appendChild(tdTitle);
                        tr.appendChild(tdPreview);
                        tr.appendChild(tdPrice);

                        document.querySelector("tbody").appendChild(tr);
                })
                }
        </script>
        </head>
        <body class="container-fluid" onload="bodyload()">
        <header class="d-flex justify-content-between mt-2 bg-dark text-white p-2">
                <div>
                <h2>Shopper.</h2>
                </div>
                <div style="font-size: 20px;">
                <a class="me-3" href="javascript:CategoryClicked('all')">Home</a>
                <a class="me-3" href="javascript:CategoryClicked('electronics')">Electronics</a>
                <a class="me-3" href="javascript:CategoryClicked()">Men's Fashion</a>
                <a class="me-3" href="javascript:CategoryClicked()">Women's Fashion</a>
                <a class="me-3" href="javascript:CategoryClicked()">Jewelery</a>
                </div>
                <div>
                <span class="bi bi-person-fill"></span>
                <span class="bi bi-heart"></span>
                <button data-bs-target="#YourCart" onclick="CartClick()" data-bs-toggle="modal" class="position-relative btn btn-warning">
                        <span class="bi bi-cart4"></span> Your Cart
                        <span id="cartCount" class="badge position-absolute top-0 end-0 bg-danger rounded rounded-circle"></span>
                </button>
                <div class="modal fade" id="YourCart">
                        <div class="modal-dialog">
                        <div class="modal-content">
                                <div class="modal-header">
                                <h2 class="text-primary">Your Cart Items</h2>
                                <button class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                <table class="table table-hover">
                                        <thead>
                                        <tr>
                                                <th>Title</th>
                                                <th>Preview</th>
                                                <th>Price</th>
                                        </tr>
                                        </thead>
                                        <tbody>

                                        </tbody>
                                </table>
                                </div>
                        </div>
                        </div>
                </div>
                </div>
        </header>
        <section class="mt-3 row">
                <nav class="col-2">
                <label class="form-label fw-bold">Select Category</label>
                <div>
                <select onchange="CategoryChanged()" id="lstCategories" class="form-select">

                </select>
                </div>
                </nav>
                <main class="col-10 d-flex flex-wrap overflow-auto" style="height:500px">

                </main>
        </section>
        <script src="../node_modules/jquery/dist/jquery.js"></script>
        <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
        </body>
        </html>

        Object Manipulations:
        --------------------
        1. How to access the value of an object?
        A. You can access the value with reference of "this" keyword and property name, within
        the object.
                        Syntax:
                                this.PropertyName;
        You can access the value with object name and property name, if it is outside object.
                        Syntax:
                                objectName.propertyName;

        2. How to access all properties in object?
        A. By using "for..in" iterator

        Syntax:
                for(var property in objectName)
                {
                }

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                for(var property in product)
                {
                        document.write(property + "<br>");
                }
        </script>

        3. How to access all values?
        A. By using for..in and object-key reference.

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                for(var property in product)
                {
                        document.write(product[property] + "<br>");
                }
        </script>

        Note: You can access all keys from object from ES5+ versions using 
                "Object.Keys()"

        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                Object.keys(product).map(function(key){
                        document.write(key + "<br>");
        })
        </script>

        4. How to set the count of all keys in object?
        A. Object.keys(product).length

        5. How to check the availability of key in object?
        A. By using JavaScript "in" operator.

                "propertyName in  objectName"    => true / false

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                if("Rating" in product){
                        document.write("Rating :" + product.Rating.Rate);
                } else {
                        document.write("Rating Not Available");
                }
        </script>

        6. How to remove any property from object?
        A. By using JavaScript "delete" operator.

        Syntax:
                delete  objectName.PropertyName;

        Ex:
        <script>
                var product = {Name:"TV", Price:45000.44, Stock:true};
                delete product.Price;
                document.write(`
                Name: ${product.Name} <br>
                ${(product.Price)?`Price=${product.Price}<br>`: "Price Not Available<br>"}
                Stock: ${product.Stock}
                `);
        </script>

        Note: You can't delete the properties of built-in JavaScript objects.

                delete Math.PI        => Invalid : all built-in properties are readonly.
                a) Array
                b) String
                c) Math

        7. What are the issues with Object Type?
        A. 
        - It can handle keys of only string type.
        - It uses all explicit methods to manipulate.
        - It is slow in access and manipulations.
        - You need various techniques for reading keys, values and size.

        Note: JavaScript E5+ versions introduced "Map()" type as alternative for object.


        JavaScript Map() type:
        ----------------------
        - Map is a key-value collection same as object.
        - Keys in map can be any type.
        - Value in map can be any type.
        - Map provides several implicit methods for manipulation.
        - Hence it is faster in access.

        Members:
        --------
        set()            : It is used to set a new key and value.
        get()            : It is used to read a value using key.
        keys()            : It returns all keys
        values()        : It returns all values
        entries()        : It retuens all keys and values
        has()            : It verifies the existance of a key.
        delete()        : It removes the specified key
        clear()            : It removes all keys
        size()            : It returns the count of keys

        Note: The issues with Map() is, it is a schema less collection. [structure less].

        Syntax:
                var  obj = new Map();
                obj.set("key", "value");
                obj.get("key");
                obj.delete("key");
                obj.size()
                obj.has("Key");

        Ex:
        <script>
                var topics = new Map();
                topics.set(1, "JavaScript is light weight JIT compiled Language");
                topics.set("html", "It is a markup language");
                topics.set(101, ["Delhi", "Hyd"]);

                document.write(topics.get(101) + "<br>");

                topics.delete("html");
                for(var item of topics.entries()){
                        document.write(item + "<br>");
                }
        </script>

        JavaScript Date Type:
        ---------------------
        - JavaScript date type values are handled by using "Date()" constructor.

        Syntax:
                var now  = new Date();        => It loads current date and time.
        
        - If you want specific date and time value to store then it must be defined as string with following format:

                new Date ("yyyy-mm-dd  hrs:min:sec.millSec");

        Syntax:
                var mfd = new Date("2023-04-22  17:30:46.88");

        - JavaScript provides various methods for handling date and time values.

                getHours()              : It returns hour number 0 to 23
                getMinutes()            : It returns minutes number 0 to 59
                getSeconds()            : It returns seconds number 0 to 59
                getMilliSeconds()       : It returns milliseconds number 0 to 99
                getDate()               : It returns date number
                getDay()                : It returns weekday number "0=Sunday"
                getMonth()              : It returns month number "0=January"
                getFullYear()           : It returns full year number "4 digits"
                getYear()               : It is obsolete [no-longer in use] [Y2K format of year]
                toLocaleDateString()
                toLocaleTimeString()
                toString()

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Navbar</title>
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <script type="text/javascript">
                var months = ["January", "Feb", "March", "April", "May","June","July"];
                var weekdays = ["Sunday", "Mon", "Tue", "Wed", "Thu", "Fri", "Saturday"];

                function DisplayClock(){
                var now = new Date();
                document.getElementById("clock").innerHTML = `${weekdays[now.getDay()]} ${now.getDate()} - ${months[now.getMonth()]} ${now.getFullYear()}`;
                var hrs = now.getHours();
                var salute = document.getElementById("salute");
                if(hrs>=00 && hrs<=12) {
                        salute.innerHTML = "Good Morning";
                } else if(hrs>=13 && hrs<=16) {
                        salute.innerHTML = "<span class='bi bi-sunrise-fill'></span> Good Afternoon";
                } else if(hrs>=16 && hrs<=23) {
                        salute.innerHTML = "Good Evening";
                }
                }
                function DisplayTime(){
                var now = new Date();
                document.getElementById("time").innerHTML = now.toLocaleTimeString();
                }
                function bodyload(){
                DisplayClock();
                setInterval(DisplayTime,1000);
                }
        </script>
        </head>
        <body class="container-fluid" onload="bodyload()">
        <div class="btn-toolbar bg-danger text-white d-flex justify-content-between">
                <div class="btn-group">
                <button class="btn btn-danger">Shopper.</button>
                </div>
                <div class="btn-group">
                <button class="btn btn-danger">Home</button>
                <button class="btn btn-danger">Pages</button>
                <button class="btn btn-danger">Blog</button>
                </div>
                <div class="btn-group">
                <button class="btn btn-danger"><span id="salute"></span></button>
                <button class="btn btn-danger"><span id="clock"></span></button>
                <button class="btn btn-danger"><span id="time"></span></button>
                </div>
        </div>
        </body>
        </html>

        Timer Events in JavaScript:
        ---------------------------
        setTimeout()
        clearTimeout()
        setInterval()
        clearInterval()

        setTimeout()
        - It is used to handle "debounce", which is used to control signal bounce in electronic devices.
        - It will load the task into memory and locks for specific duration.
        - In other terminology is called "thread - sleep".

        Syntax:
                setTimeout(function(){ }, interval);

        - To erase the function from memory you can use "clearTimeout()".

        Syntax:
                clearTimeout(functionRefName);

                Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script type="text/javascript">
                        function Msg1(){
                        document.querySelector("h1").innerHTML = "Hello !";
                        }
                        function Msg2(){
                        document.querySelector("h1").innerHTML = "How are You?";
                        }
                        function Msg3(){
                        document.querySelector("h1").innerHTML = "Welcome to JavaScript";
                        }
                        var m1, m2, m3;
                        function bodyload(){
                        m1 = setTimeout(Msg1,3000);
                        m2 = setTimeout(Msg2,6000);
                        m3 = setTimeout(Msg3,12000);
                        }
                        function Clear2(){
                        clearTimeout(m2);
                        }
                </script>
                </head>
                <body onload="bodyload()">
                <button onclick="Clear2()">Clear Message - 2</button>
                <h1 align="center"></h1>
                </body>
                </html>

        setInterval()
        - It is used to load task into memory and release into process at regular time intervals.
        - It repeats the task until it is removed from memory.

        Syntax:
                setInterval(function() { }, timeInterval)

        - You can clear the function from memory by using "clearInterval()".

                Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Load Image</title>
                <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                <script type="text/javascript">
                        var count = 0;
                        function Loading(){
                        count++; // count=count + 1
                        document.getElementById("status").innerHTML = `${count} %`;
                        if(count==100) {
                                document.getElementById("loadingContainer").style.display = "none";
                                document.getElementById("previewContainer").style.display = "block";
                        }
                        }
                        function LoadImageClick(){
                        document.getElementById("loadingContainer").style.display = "block";
                        document.getElementById("btnContainer").style.display = "none";
                        setInterval(Loading,100);
                        }
                </script>
                </head>
                <body class="container-fluid d-flex justify-content-center align-items-center" style="height:500px">
                <div>
                <div id="btnContainer">
                        <button onclick="LoadImageClick()" class="btn btn-success">Load Image</button>
                </div>
                <div id="loadingContainer" class="text-center" style="display: none;">
                        <div class="spinner-border text-success"></div>
                        <p> <span id="status"></span> Loading...</p>
                </div>
                <div id="previewContainer" style="display: none;">
                        <img src="../public/images/fashion1.jpg" width="300" height="400">
                </div>
                </div>
                </body>
                </html>


        Ex: Timer Events

                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Load Image</title>
                <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
                <script type="text/javascript">
                        var count = 0;
                        function Loading(){
                        var img = document.querySelector("img");
                        count++; // count=count + 1
                        document.getElementById("status").innerHTML = `${count} %`;
                        document.getElementById("progress").value = count;
                        if(count==100) {
                                document.getElementById("loadingContainer").style.display = "none";
                                document.getElementById("previewContainer").style.display = "block";
                                img.style.animationName = "ZoomIn";
                                img.style.animationDuration = "5s";
                        }
                        }
                        var loading;
                        function LoadImageClick(){
                        document.getElementById("loadingContainer").style.display = "block";
                        document.getElementById("btnContainer").style.display = "none";
                        loading = setInterval(Loading,100);
                        }
                        function PauseClick(){
                        clearInterval(loading);
                        }
                        function ResumeClick(){
                        loading = setInterval(Loading,100);
                        }
                </script>
                <style>
                        progress {
                        width: 300px;
                        height: 20px;
                        }
                        @keyframes ZoomIn {
                        from {
                                width:50px;
                                height: 50px;
                        }
                        to {
                                width: 300px;
                                height: 400px;
                        }
                        }
                </style>
                </head>
                <body class="container-fluid d-flex justify-content-center align-items-center" style="height:500px">
                <div>
                <div id="btnContainer">
                        <button onclick="LoadImageClick()" class="btn btn-success">Load Image</button>
                </div>
                <div id="loadingContainer" class="text-center" style="display: none;">
                        <div>
                        <progress id="progress" min="1" max="100" value="1"></progress>
                        </div>
                        <div>
                        <button onclick="PauseClick()" class="btn btn-primary"> || </button>
                        <button onclick="ResumeClick()" class="btn btn-success"> > </button>
                        </div>
                        <p> <span id="status"></span> Loading...</p>
                </div>
                <div id="previewContainer" style="display: none;">
                        <img src="../public/images/fashion1.jpg" width="300" height="400">
                </div>
                </div>
                </body>
                </html>

        JavaScript Operators:
        ---------------------
        - Operator is an object that evaluates an value by using specific expression.
        - Operators are classified into 3 groups based on operands

                        x + y    => x, y are operands and "+" is operator

        1. Unary Operator
        - It handle operation using one operand.

                ++, -- 
        Syntax:
                var x = 1;
                x++;            // x = x + 1

        2. Binary Operator
        - It handles operation using two operands

                +, - , *, / ..

        Syntax:
                x  + y


        3. Ternary Operator
        - It handle operation using three operands

                "?:"
        Syntax:
                (condition)?true:false

        - The operators are further classified into various groups based on the value they return.

        1. Arithematic Operators [ number ]

        +        Addition
        -        Subtraction
        *        Multiplication
        /        Division
        %        Modulus
        **        Power [Math.pow()]    2**3 => 8
        ++        Increment
        --        Decrement

        FAQ's:
        string + string            => string            "A" + "B" => AB
        string + number            => string            "A" + 10  => A10
        string + boolean            => string            "A" + true => Atrue
        number+number        => number        10 + 20 => 30
        number+boolean        => number        10 + true => 11
        boolean+boolean        => number        true + true => 2

        string - string                =>  NaN
        string - number            => NaN
        string - boolean            => NaN
        number-number            => number
        number-boolean            => number
        boolean-boolean        => number

        10 / false                     => infinity

        - Increment and Decrement

        x = 10;
        y = x++;            x=11, y=10

        - Post Increment, will assign the value and then increments.

        x = 10;
        y = ++x;            x=11,  y=11

        - Pre Increment, will increment and then assign.

        x = 10;
        y = x--;            x=9, y=10        post decrement

        x = 10;
        y = --x;            x=9, y=9        pre decrement

        2. Comparision Operators    [boolean]

        ==                Equal
        ===            Identical Equal
        >                Greater than
        >=                Greater than or equal
        <                Lessthan
        <=                Lessthan or equal
        !=                Not equal
        !==                Not Identical

        FAQ: What is difference between "==" & "===" ?
        Ans:     "==" can compare values of different types.
                
                Syntax:    
                        x = "10";
                        y = 10;
                        x==y        ?  true

                "===" can compare values only of same type.

                        x===y         ? false


        3. Assignment Operators

        +=            Add and assign
        -=            subtract and assign
        *=
        /=
        %=


        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                var position = 50;
                function MoveRightClick(){
                document.querySelector("img").style.marginLeft = position + "px";
                position+=50;
                }
                function MoveLeftClick(){
                position-=50;
                document.querySelector("img").style.marginLeft = position + "px";
                }
        </script>
        </head>
        <body>
        <div>
                <button onclick="MoveLeftClick()">Move Left</button>
                <button onclick="MoveRightClick()">Move Right</button>
        </div>
        <br>
        <img src="../public/images/a4.jpg" width="100" height="100">
        </body>
        </html>

        4. Logical Operators

        &&                Logical AND
        ||                Logical OR
        !                 NOT


        Syntax:
        exp1 && exp2        => If both expressions evaluate true then the result is true
        exp1  || exp2       => If any one expression is true then the result is true.
        !true               => false

        !undefined            => defined

        Ex:
        data / users.json

        [
        {
                "UserName": "john_nit",
                "Password": "john@123"
        },
        {
                "UserName": "raj_hyd",
                "Password": "raj11"
        }
        ]

        Login.html

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login</title>
        <script>
                function LoginClick(){
                var username = document.getElementById("UserName").value;
                var password = document.getElementById("Password").value;

                fetch("../data/users.json")
                .then(function(response){
                        return response.json();
                })
                .then(function(users){
                        users.map(function(user){
                        if(user.UserName===username && user.Password===password){
                                document.write("Login Success..");
                                return;
                        } else {
                                document.querySelector("p").innerHTML = "Invalid User Name / Password".fontcolor('red');
                        }
                        })
                })
                }
        </script>
        </head>
        <body>
        <dl>
                <h3>User Login</h3>
                <dt>User Name</dt>
                <dd><input type="text" id="UserName"></dd>
                <dt>Password</dt>
                <dd><input type="password" id="Password"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
        <p></p>
        </body>
        </html>

        Ex: Break

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login</title>
        <script>
                function LoginClick(){
                var username = document.getElementById("UserName").value;
                var password = document.getElementById("Password").value;

                fetch("../data/users.json")
                .then(function(response){
                        return response.json();
                })
                .then(function(users){
                        for(var user of users){
                        if(user.UserName===username && user.Password===password){
                                document.write("Login Success");
                                break;
                        } else {
                                document.querySelector("p").innerHTML = "Invalid User Name / Password".fontcolor('red');
                        }
                        }
                })
                }
        </script>
        </head>
        <body>
        <dl>
                <h3>User Login</h3>
                <dt>User Name</dt>
                <dd><input type="text" id="UserName"></dd>
                <dt>Password</dt>
                <dd><input type="password" id="Password"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
        <p></p>
        </body>
        </html>

        JavaScript Special Operators:
        ----------------------------

        1. new        : It is dynamic memory allocating operator.

        Syntax:
                var products = new Array()
                var date  = new Date()

        2. delete    : It is used to delete any property from object.

        Syntax:
                delete   product.Price;

        3. in        : It is used to verify existance of property in an object.

        Syntax:
                "Price" in product            => true  if price exists.

        4. typeof    : It is used to return the data type of value stored in reference.

        Syntax:
                var  price = 34000.44;
                var  stock = true;

                typeof  price            => number
                typeof  stock            => boolean

        5. instanceOf:     It returns true of object is instance of specified class.

        Syntax:
                var  products =  [ ];
                
                products  instanceOf   Array        => true
                products  instanceOf   Date            => false

        6. void        :  It is used to discard the return of any element.

        Syntax:
                        <a href="javascript:void()"> Home </a>

                                JavaScript Statements

        - A statement is used to control the execution flow.
        - Statements are classified into various groups

        1. Selection Statements
                if, else, switch, case, default

        2. Looping Control
                for, while, do while

        3. Iteration Statements
                for..in, for..of

        4. Jump Statements
                break, return, continue

        5. Exception Handling Statements
                try, catch, throw, finally

        Selection Statements:
        ---------------------
        - Selection statements are used in decision making.

        1. The "IF" select

        a) Forward Jump    : In this approach the statements are executed only when condition is true. There is no alternative.

        Syntax:
                if (condition )
                {
                statement on true;
                }

        Ex: forward jump
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        var userDetails = {
                        Card: "4444555566667890",
                        Cvv: "3456",
                        Expiry:"2024"
                        }
                        function VerifyCard(){
                        var card = document.getElementById("Card").value;
                        if(card===userDetails.Card){
                                document.getElementById("cvvContainer").style.display ="block";
                        }
                        }
                        function VerifyCvv(){
                        var cvv = document.getElementById("Cvv").value;
                        if(cvv===userDetails.Cvv) {
                                document.getElementById("expiryContainer").style.display = "block";
                        }
                        }
                        function ExpiryChange(){
                        var expiry = document.getElementById("Expiry").value;
                        if(expiry===userDetails.Expiry){
                                document.getElementById("btnPay").disabled = false;
                        }
                        }
                        function PayClick(){
                        document.write("Payment Success");
                        }
                </script>
                </head>
                <body>
                <dl>
                        <h3>Payment Details</h3>
                        <dt>Card Number</dt>
                        <dd><input type="text" onblur="VerifyCard()" id="Card"></dd>
                        <div id="cvvContainer" style="display: none;">
                        <dt>CVV</dt>
                        <dd><input type="text" onblur="VerifyCvv()" id="Cvv" size="4"></dd>
                        </div>
                        <div id="expiryContainer" style="display: none;">
                        <dt>Expiry</dt>
                        <dd>
                                <select id="Expiry" onchange="ExpiryChange()">
                                <option>2023</option>
                                <option>2024</option>
                                <option>2025</option>
                                </select>
                        </dd>
                        </div>
                        <button id="btnPay" disabled onclick="PayClick()">Pay</button>
                </dl>
                </body>
                </html>

        2. Simple Decision:  It provides one alternative if the given condition evaluates to false.

        Syntax:
                if (condition)
                {
                statement on true;
                }
                else
                {
                statement on false;
                }

                        "If and else clause"

        Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        var userDetails = {
                        Card: "4444555566667890",
                        Cvv: "3456",
                        Expiry:"2024"
                        }
                        function VerifyCard(){
                        var card = document.getElementById("Card").value;
                        if(card===userDetails.Card){
                                document.getElementById("cvvContainer").style.display ="block";
                        } else {
                                document.getElementById("btnPay").disabled = true;
                        }
                        }
                        function VerifyCvv(){
                        var cvv = document.getElementById("Cvv").value;
                        if(cvv===userDetails.Cvv) {
                                document.getElementById("expiryContainer").style.display = "block";
                        } else {
                                document.getElementById("btnPay").disabled = true;
                        }
                        }
                        function ExpiryChange(){
                        var expiry = document.getElementById("Expiry").value;
                        if(expiry===userDetails.Expiry){
                                document.getElementById("btnPay").disabled = false;
                        } else {
                                document.getElementById("btnPay").disabled = true;
                        }
                        }
                        function PayClick(){
                        document.write("Payment Success");
                        }
                </script>
                </head>
                <body>
                <dl>
                        <h3>Payment Details</h3>
                        <dt>Card Number</dt>
                        <dd><input type="text" onblur="VerifyCard()" id="Card"></dd>
                        <div id="cvvContainer" style="display: none;">
                        <dt>CVV</dt>
                        <dd><input type="text" onblur="VerifyCvv()" id="Cvv" size="4"></dd>
                        </div>
                        <div id="expiryContainer" style="display: none;">
                        <dt>Expiry</dt>
                        <dd>
                                <select id="Expiry" onchange="ExpiryChange()">
                                <option>2023</option>
                                <option>2024</option>
                                <option>2025</option>
                                </select>
                        </dd>
                        </div>
                        <button id="btnPay" disabled onclick="PayClick()">Pay</button>
                </dl>
                </body>
                </html>

        3. Multi Level Decisions : It uses a forward jump approach and also provides an alternative for every decision.

        Syntax:
        if (condition1)
        {
                if(condition2)
                {
                statement on both conditions true;
                }
                else {
                statement on condition2 false;
                }
        } else {
                statement on condition1 false;
        }

        Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        var userDetails = {
                        Card: "4444555566667890",
                        Cvv: "3456",
                        Expiry:"2024"
                        }
                        function PayClick(){
                        var card = document.getElementById("Card").value;
                        var cvv = document.getElementById("Cvv").value;
                        var expiry = document.getElementById("Expiry").value;
                        var msg = document.getElementById("msg");

                        if(card===userDetails.Card){
                                if(cvv===userDetails.Cvv){
                                        if(expiry===userDetails.Expiry){
                                                document.write("Payment Success");
                                        } else {
                                                msg.innerHTML = "Invalid Expiry"
                                        }
                                } else {
                                msg.innerHTML = "Invalid CVV"
                                }
                        } else {
                                msg.innerHTML = "Invalid Card";
                        }
                        
                        }
                </script>
                </head>
                <body>
                <dl>
                        <h3>Payment Details</h3>
                        <dt>Card Number</dt>
                        <dd><input type="text" id="Card"></dd>
                        <div id="cvvContainer">
                        <dt>CVV</dt>
                        <dd><input type="text" id="Cvv" size="4"></dd>
                        </div>
                        <div id="expiryContainer">
                        <dt>Expiry</dt>
                        <dd>
                                <select id="Expiry" >
                                <option>2023</option>
                                <option>2024</option>
                                <option>2025</option>
                                </select>
                        </dd>
                        </div>
                        <button id="btnPay" onclick="PayClick()">Pay</button>
                        <p align="center" id="msg"></p>
                </dl>
                </body>
                </html>

        4. Multiple Choices        : It is an approach where more than one choice is provided for same task.

        Ex:
        if(condition1-choice1)
        {
                statement on 1 true;
        }
        else if(condition2-choice-2)
        {
                statement on 2 true;
        } 
        else {
                statement on false;
        }

        Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        var userDetails = {
                        UserId: "john_nit",
                        Mobile: "+919876543210",
                        Email: "john@outlook.com"
                        };
                        var flag = "";
                        function SubmitClick(){
                        var userid = document.getElementById("UserId").value;
                        if(userid===userDetails.Email){
                                flag = `Your activation code sent to ${userid}`;
                        } else if(userid===userDetails.Mobile){
                                flag = `OTP sent to your mobile ${userid}`;
                        } else {
                                document.write("Invalid Email or Mobile");
                        }
                        document.write(flag);
                        }
                </script>
                </head>
                <body>
                <dl>
                        <dt>Your Email or mobile phone number</dt>
                        <dd><input type="text" id="UserId"></dd>
                </dl>
                <button onclick="SubmitClick()">Submit</button>
                </body>
                </html>

                Switch Statement:
                -----------------
                - In electronics switch is used to interrupt the flow of electrons.
                - There are various types of switches 
                        a) Push Button    
                        b) Toggle Switch
                        c) Joystick
                        d) Selector 
                Syntax:
                        switch(value | expression)
                        {
                        case  value|expression:
                        statements;
                        jump;
                        default:
                        statements;
                        jump;
                        }

                Ex:
                <script>
                var n = parseInt(prompt("Enter Number"));
                switch(n)
                {
                        case 1: 
                        document.write("One");
                        break;
                        case 2: 
                        document.write("Two");
                        break;
                        case 3: 
                        document.write("Three");
                        break;
                        case 4: 
                        document.write("Four");
                        break;
                        default: 
                        document.write("Please enter 1 to 4 only");
                        break;
                }
                </script>

                FAQ's:
                1. Can we define switch without default?
                A. Yes.

                2. Can we define default before or between cases?
                A. Yes.

                3. Can we define case without break?
                A. Yes. It will stop when next break occurs or will stop at the end of switch.

                4. Can we define case with return as jump?
                A. Yes.

                5. What is difference between break and return?
                A. Break will stop the block but still continue in function.
                Return will stop the compiling and exits the script.

                6. Can we define any another data type as case value?
                A. Yes.

                Ex:
                <script>
                function f1(){
                        var choice = prompt("Enter Choice", "yes|no");
                        switch(choice){
                        case "yes": 
                        document.write("You selected Yes to continue");
                        break;
                        case "no": 
                        document.write("You selected No to stop");
                        break;
                        default:
                        document.write("Please enter yes or no");
                        break;
                        }
                }
                f1();
                </script>


                7. How you define same block to execute for multiple choices?
                A. By writing multiple case statements for same block.

                syntax:
                        case 1:
                        case 8:
                        statements;
                        break;

                Ex:
                <script>
                function f1(){
                        var choice = prompt("Enter Choice", "y|n");
                        switch(choice){
                        case "y": 
                        case "Y":
                        document.write("You selected Yes to continue");
                        break;
                        case "n": 
                        case "N":
                        document.write("You selected No to stop");
                        break;
                        default:
                        document.write("Please enter yes or no");
                        break;
                        }
                }
                f1();
                </script>

                8. How to write case for range of values?
                A. We can write the range of values by using boolean expression.
                If case is using boolean expression then always switch value must be "true".

                Ex:
                <script>
                function f1(){
                var n = parseInt(prompt("Enter Number"));
                switch(true)
                {
                        case (n>=1 && n<=10): 
                        document.write(`Your number ${n} is between 1 to 10`);
                        break;
                        case (n>10 && n<=20): 
                        document.write(`Your number ${n} is between 11 to 20`);
                        break;
                }
                }
                f1();
                </script>

                Summary:
                if, else, switch, case ,default


        Looping Control Statements:
        ---------------------------
        - Looping is the process of executing a set of statements repeatedly based on initialization, condition and counter.
        - Loops are created by using

                a) for
                b) while
                c) do while

        1. The For loop:
        - It is used by developer when he is sure about the number of iterations.
        - It is good for the collection that doesn't change dynamically.
        - Iteration counter can't change dynamically.

        Syntax:
        for(initialization; condition; counter)
        {
        }

        Ex:
        for(var i=1; i<=10; i++)
        {
                statements;    
        }

        2. while and do while
        - These are good for collection where iteration counter have to change dynamically.
        - There is no fixed range for values.
        - while can execute only when condition is true.
        - do while can execute the statements at least once even when the condition is false.

        Syntax:
        while(condition)
        {
                statements;
                counter;
        }
        Syntax:
        do {
        statements;
        counter;
        } while(condition);

        Task : 
                Enter Pin : 6993      => 3 times it can be wrong, 4 th attempt must block
        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                var userDetails = {
                UserName: "John",
                Pin: "4560"
                }
                var count = 0;
                function VerifyPin(){
                var pin = document.getElementById("Pin").value;
                if(pin===userDetails.Pin){
                        document.write("Verified Successfully..");
                } else {
                        do 
                        {
                        if(count==3){
                                document.querySelector("button").disabled = true;
                                document.getElementById("error").innerHTML = "Card Blocked";
                        }
                        count++;
                        document.getElementById("error").innerHTML = `Invalid PIN - ${3-count} attempts left`;
                        }while(count>=3)
                }
                }
        </script>
        </head>
        <body>
        <dl>
                <dt>Your PIN</dt>
                <dd><input type="text" id="Pin"></dd>
                <dd id="error"></dd>
        </dl>
        <button onclick="VerifyPin()">Submit</button>
        </body>
        </html>


        Iteration Statements:
        ---------------------
        - Iteration is a software design pattern.
        - It is the process of accessing elements from a collection in sequential order.
        - Iteration doesn't require initialization, condition and counter.
        - Iteration statements are defined by using

                a) for..in
                b) for..of

        - for..in  => is used for reading all properties from collection.
        - for..of  => is used for reading all values from collection.

        Syntax:
                for(var property  in collection)
                {
                }

                for(var value of collection)
                {
                }

        Note: Iterations use a "function generator".


        Ex: Looping

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                var menu = [
                {Category: "Electronics", Products: ["TV", "Mobile"]},
                {Category: "Footwear", Products: ["Casuals", "Boots"]}
                ];

                function bodyload(){
                for(var i=0; i<menu.length; i++){
                        var li = document.createElement("li");
                        li.innerHTML = menu[i].Category;
                        for(var j=0; j<menu[i].Products.length; j++)
                        {
                        var ul = document.createElement("ul");
                        var ul_li = document.createElement("li");
                        ul_li.innerHTML = menu[i].Products[j];
                        ul.appendChild(ul_li);
                        li.appendChild(ul);
                        document.querySelector("ol").appendChild(li);
                        }
                }
                }
        </script>
        </head>
        <body onload="bodyload()">
        <ol></ol>
        </body>
        </html>


        Ex: Iterations

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                var menu = [
                {Category: "Electronics", Products: ["TV", "Mobile"]},
                {Category: "Footwear", Products: ["Casuals", "Boots"]}
                ];

                function bodyload(){
                for(var item of menu)
                {
                        var li = document.createElement("li");
                        li.innerHTML = item.Category;
                        for(var product of item.Products){
                        var ul = document.createElement("ul");
                        var ul_li = document.createElement("li");
                        ul_li.innerHTML = product;
                        ul.appendChild(ul_li);
                        li.appendChild(ul);
                        document.querySelector("ol").appendChild(li);
                        }
                }
                }
        </script>
        </head>
        <body onload="bodyload()">
        <ol></ol>
        </body>
        </html>

        Ex: By using map()

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                var menu = [
                {Category: "Electronics", Products: ["TV", "Mobile"]},
                {Category: "Footwear", Products: ["Casuals", "Boots"]}
                ];

                function bodyload(){
                menu.map(function(item){
                        var li = document.createElement("li");
                        li.innerHTML = item.Category;
                        item.Products.map(function(product){
                        var ul = document.createElement("ul");
                        var ul_li = document.createElement("li");
                        ul_li.innerHTML = product;
                        ul.appendChild(ul_li);
                        li.appendChild(ul);
                        document.querySelector("ol").appendChild(li);
                        })
                })
                }
        </script>
        </head>
        <body onload="bodyload()">
        <ol></ol>
        </body>
        </html>

        FAQ:
        1. Is this valid syntax
        var i=1;
        for(  ; i<=10; i++) {

        }
        A. Yes

        2. Is this valid syntax
        
        var i=1;
        for(i<=10; i++) {

        }

        A. No. It is invalid, initializer location can't be removed. It can be empty.

        3. Is this valid syntax

        var i=1;
        for( ;   ;  i++) {
                if(i<=10){
                }
        } 

        A. Yes. It is valid.


        4. Write a program to print  triangle of "*" ?
        5. Write a program to print  diamond of "*"?

        *
        *  * 
        *  *   *
        *  *   *   *

                codechef, codewars, hackerrank


        Jump Statements:
        ---------------
        1. break
        2. return
        3. continue

        - break terminates the current block but stays in function.
        - return terminates the current function and stops compiling.
        - continue is used to skip the current counter.

        Syntax:
        for(var i =1; i<=10; i++)                                1
        {                                                        2
                if(i==5) {                                       3
                continue;                                        4
                }                                                6                        
                document.write(i + "<br>);                       7
        }
        
        Ex:
        <script>
        var data = [
                {Name: "TV", Category: "Electronics"},
                {Name: "Nike Casuals", Category: "Footwear"},
                {Name: "Shirt", Category: "Fashion"},
                {Name: "Mobile", Category: "Electronics"}
        ];
        function f1(){
                for(var item of data){
                if(item.Category=="Footwear" || item.Category=="Fashion"){
                        continue;
                }
                document.write(item.Name + "<br>");
                }
        }
        f1();
        </script>

        Exception Handling Statements:
        ------------------------------
        - Computer programming errors are classified into 2 types
        1. Compile Time Errors
        2. Run Time Errors

        - Compile time errors are syntactical errors, due to which program fails to run.
        - Run Time errors are dynamic that occur while using application. It compiles success fully but have catastrophic failures.
        - Run time errors lead to abnormal termination of application.
        - Exception handling is used in computer programming to avoid "Abnormal Termination".
        - Exception handling statements

        a) try
        b) catch
        c) throw
        d) finally

        - try          : It is the monitoring block - statements to execute
        - catch        : It is handler block - catch the issues in code.
        - throw        : It is used to throw any exception
        - finally      : It comprises of statements to execute always

        Ex:
        <script>
        try {
                var a = parseInt(prompt("Enter Number1"));
                var b = parseInt(prompt("Enter Number2"));
                if(b==0){
                throw "Divide By Zero Error<br>";
                }
                if(b>a) {
                throw "Number is too large <br>";
                }
                var c = a / b;
                document.write(`C=${c}<br>`);
        }
        catch(ex) {
                document.write(ex);
        }
        finally {
                document.write("Program End");
        }
        </script>

        JavaScript Functions:
        ---------------------
        - Functions are used to "refactor" the code.
        - Refactor is the process of encapsulating the code into one unit and extracting into a function or file.
        - Refactoring is required to re-use the logic.

        Function Configuration:
        ----------------------
                - Function is configured by using "function" keyword.
                - It comprises of 
                        a) Declaration
                        b) Expression

                - Declaration is the process of allocating memory for function, so that it can handle specific operation.

                Syntax:
                        function  Name()
                        {
                        statements;
                        }

                - Expression is the process of allocating memory for a function, where the functionality can change according to state and situation.

                Syntax:
                        var  Name = function() {        // initializing a function

                        }
                        Name = function() { }        // assigning a new function
                        
                Ex:
                <script>
                var report;
                var generateReport = prompt("Generate Report For:", "student|product");
                if(generateReport==="student"){
                        report = function(){
                        document.write(`Name=John<br>Course=JavaScript<br>Sub=OOP`);
                        }
                } else if(generateReport==="product"){
                        report = function(){
                        document.write(`Name=TV<br>Price=566000.33`);
                        }
                } else {
                        report = function(){
                        document.write(`Report can be generated only for student or product`);
                        }
                }
                report();
                </script>

                - Every function comprises of 3 parts

                a) Declaration
                b) Signature
                c) Definition

                Syntax:
                function Print(params)
                {
                }

                function Print(params)               => Declaration
                Print(params)                        => Signature
                { }                                  => Definition

        Function Parameters:
        --------------------
                - Parameters are used to modify the function.

                Syntax:
                function  Name(param)
                {

                }
                Name(value);

                - The parameters passed into function declaration are known as "Formal Parameters".
                - The values passed into function signature are known as "Actual Parameters".

                Ex:
                function Print(userName)
                {
                        document.write(`Hello ! ${userName}`);
                }
                Print("John");

                        // userName=John
                        [Formal] = [Actual]

                Ex:
                <script>
                function PrintNumbers(howMany){                 // howMany is formal parameter 
                        for(var i=1; i<=howMany; i++){
                        document.write(i + "<br>");
                        }
                }
                PrintNumbers(4);                                // 4 is actual parameter 
                </script>

                - A function handle any type of parameter
                        a) Primitive
                        b) Non-Primitive
                        c) Function

                Syntax:
                function  Name(a, b, c, d)
                {
                }

                Name(1, "A", true, [ ]);

                        a = number,  b=string, c=boolean, d=Array

                Ex:
                <script>
                function Details(id, name, stock, cities, rating, report)
                {
                        document.write(`
                        Id = ${id} <br>
                        Name = ${name} <br>
                        Stock = ${stock} <br>
                        Cities = ${cities.join("-->")} <br>
                        Rating = ${rating.rate} [${rating.count}] <br>
                        `);
                        report();
                }
                Details(1, "TV", true, ["Delhi", "Hyd"], {rate:3.5, count:5600}, function(){document.write("Product Report Generated..");});

                </script>

                - Function can have max 1024 params. [Standards of ECMA]
                - JavaScript ES6 introduced "Rest and Spread" syntax.

        Rest Parameters:
        ----------------
                - A single rest parameter in function can handle multiple arguments.
                - It is defined by using "...paramName".

                Syntax:
                        function Name(...paramName)
                        {
                        }
                        Name(arg1, arg2, arg3, arg4);

                        paramName[0]    = arg1
                        paramName[1]    = arg2...

                Ex:
                <script>
                function Details(...product)
                {
                        var [id, name, stock, cities, rating, report] = product;
                        document.write(`
                        Id = ${id} <br>
                        Name = ${name} <br>
                        Stock = ${stock} <br>
                        Cities = ${cities.join("-->")} <br>
                        Rating = ${rating.rate} [${rating.count}] <br>
                        `);
                        report();
                }
                Details(1, "Samsung TV", true, ["Delhi", "Hyd"], {rate:3.5, count:5600}, function(){document.write("Product Report Generated..");});

                </script>

                - Every function can have only one "rest" parameter.
                - You can define other parameters along with rest parameter.
                - Rest parameter must be the last parameter in formal list.

                Ex:
                <script>
                function Details(title,...product){
                        var [id, name, price] = product;
                        document.write(`<h2>${title}</h2>Id=${id}<br>Name=${name}<br>Price=${price}`);
                }
                Details("Product Details",1, "TV", 45000.33);
                </script>

        Spread Syntax:
        -------------
                - In "rest" formal parameter is one and args are many.
                - In "spread" formal parameters are many and args is one.

                Syntax:
                        function  Name(p1, p2, p3)
                        {
                        }
                        Name (...[10, 20, 30]);
                
                        p1=10,  p2=20, p3=30

        FAQ: Why we need a function as parameter?
        Ans :  It is used for handling "Call Backs".
                Callback is a technique where multiple functions are defined, but only one
                executes according to situation.
        Ex:
        <script>
        function FetchData(url, success, failure) {
                if(url==="http://fakestoreapi.com&quot;){
                success();
                } else {
                failure();
                }
        }
        FetchData(
                prompt("Enter URL"),
                function(){
                document.write("Data fetched successfully..");
                },
                function(){
                document.write("Unable to fetch data - Invalid URL");
                }
        )
        </script>

        Anonymous Function:
        ------------------
                - JavaScript can configure a function without Name, which is known as anonymous.
                - Anonymous functions are executed using IIFE pattern. 
                [Immediately Invoked Function Expression].

                Ex:
                <script>
                (function(msg){
                        document.write(msg + "<br>");
                })("Hello ! world");
                var welcome = function(){
                        document.write("Welcome to JS");
                }
                welcome();
                </script>

        Function Return:
        ----------------
        - Every function is void type.
        - Void discards the memory after using the function.
        - You can keep the memory of function alive to store data by using "return" in function.

        Syntax:
        function  Name()
        {
                return   value;
        }

        Ex:
        function Addition(a,  b)
        {
        return a + b;
        }
        document.write("Addition=" + Addition(10,30));

        FAQ:
        1. What type of value a function can return?
        A. Any type
        a) Primitive type
        b) Non Primitive type

        Ex:
        <script>
        function GetProducts(){
                return [
                {Name: "TV", Price:45000.54},
                {Name: "Mobile", Price: 13000.33}
                ];
        }
        GetProducts().map(function(product){
                document.write(`${product.Name} - ${product.Price}<br>`);
        })
        </script>

        2. Can a function have multiple "return" keywords?
        A. Yes. It is used for conditional rendering.

        Syntax:
        function  Name()
        {
                if(condition)
                {
                return A;
                } else {
                return B;
                }
        }

        3. Can we use return in a function without returning any value?
        A. Yes. 

        Syntax:
        function  Name()
        {
        statement-1;
        statement-2;
        return;
        statement-3;
        }

                                Function Closure
                                ----------------
        - Closure is a scope where the members of outer function are accessible to inner function.
        - In closure you can't access the members of inner function in outer, you have to use "return" to keep the memory of inner function and access in outer function.

        Ex:
        <script>
        function Outer(){
                var a = 10;
                function Inner(){
                var b = 20;
                var c = a + b;
                return c;               // we can access inner function to outer function by using "return"
                }
                document.write("C=" + Inner());
        }
        Outer(); []
        </script>

                                Function Recursion
                                ------------------
        - Recursion is the process of invoking a function with in the context of same function.
        - It is used to create batch operations.
                
        Syntax:
        function  f1()
        {
                f1();        // recursion
        }

        Ex:
        <script>
        function Factorial(n){
                if(n==0){
                return 1;
                } else {
                return n * Factorial(n-1);
                }
        }
        document.write(`Factorial of 6 is ${Factorial(6)}`);
        </script>

                                Arrow Functions
                                ---------------

        - It is a short hand technique of writing a function.
        - It is good for defining function expressions.

        Syntax: without arrow

        function  Hello()
        {
        return "Hello ! JavaScript";
        }

        Syntax: with arrow

        const  Hello = () => "Hello JavaScript";

        ( )            function
        =>            definition and return

        Ex: 
        <script>
        var add = (a,b)=> a + b;
        document.write("Addition=" + add(10,20));
        </script>

        Ex:
        <script>
        var hello = () => "Hello World";
        document.write(hello());
        </script>

        Ex:
        <script>
        var hello = name => `Hello ! ${name}`;
        document.write(hello("John"));
        </script>

        Ex:
        <script>
        fetch("http://fakestoreapi.com/products&quot;)
        .then(response => response.json())
        .then(products => {
                products.map(product=> {
                document.write(product.title + "<br>");
                })
        })
        </script>

        Ex:
        <script>
        var sales = [50000,32240, 57000, 25699];
        var result = sales.filter(value=> value<50000);
        document.write(result);
        </script>

                                Function Generator
                                ------------------
        - It is used to create iterators.
        - Iterator is design pattern used to access elements from a collection in sequential order.
        - A function generator is defined using "*" , which refers to all elements [zero or more]
        - A function generator returns value by using "yeild" operator.

        Ex:
        <script>
        function* ReadValues(){
                yield 10;
                yield 20;
                yield 30;
        }
        console.log(ReadValues().next());

        </script>

        JavaScript OOP
        --------------

- Real-world development uses various programming systems
    
    1. POPS 
    2. OBPS
    3. OOPS

        POPS
        - Process Oriented Programming System
        - It supports low level features.
        - It can directly interact with hardware services.
        - It is fast and uses less memory.

        Ex: C, Pascal

        - It will not support dynamic memory.
        - It is hard to reuse.
        - It is hard to extend.

        OPBS:
        - Object Based Programming System
        - It supports dynamic memory.
        - It supports reusability.
        - It supports separation.

        Ex: JavaScript, Visual Basic
        - No code level security.
        - No dynamic polymorphism.
        - Extensibility issues

        OOPS
        - Object Oriented Programming System
        - It supports code reusability
        - It supports code extensibility
        - Code level security
        - Contracts, Abstraction etc..

        Ex: C++, Java, C#

        - It will not support low level features.
        - It can't directly interact with hardware services.
        - It uses more memory.
        - It is slow in access.

        Note: JavaScript is not an OOP language, it supports only few features of OOP.

                        JavaScript Modules
                        ------------------
- A module is set of classes, functions and values.
- Every JavaScript file is considered as a module.
- Modules are used for building a library.
- A library provides set of functions and values, which are used in building an application.
- It enables reusability of code.
- To use modules in any application, we need a module system installed.
- The various module systems are
        a) Common JS
        b) Require JS
        c) UMD (Universal Module Distribution)
        d) AMD (Asynchronous Module Distribution)
        e) ES [Available in all browsers]
- To use the module system in browser you have to define script type as module.

        <script type="module">

        </script>

- Every module comprises of functions, variables and classes, which are private in access. They are not accessible outside module.

- If you want any function or class to access outside module, then you have to mark it as "export".

        export function Name() 
        {
        }

FAQ: Can we mark a variable as export?
Ans: Yes only if variable is holding a function expression.

      export var  hello = 10;        // invalid

       var hello  = function() { }
       export hello;

- The functions and classes defined in a module can be accessed from any page by importing into the module scope.

syntax:
        <script type="module">
            import   {  functionName,  className } from  "moduleFileName";

        </script>

- Every module can have one member with "default" export.
- It configures "eager" loading of a member.
- The members without "default" export will use "lazy" loading.
- "Lazy" Loading is a pattern where the object is created and loaded only when required.

Syntax:
    export default function Addition() {

    }

    import   Addition from  "moduleName";
    import  {Addition} from "moduleName";    // invalid

- Default member must be imported first. It can't be last import.

        Ex:
        1. Add a new folder into project 
                "library"

        2. Add following files into library folder

                home.module.js

        var username = "John";

        export default function Hello(){
        return `Hello ! ${username}`;
        }

        export function Addition(a, b){
        return a + b;
        }

                math.module.js


        export default function Factorial(n){
        if(n==0){
                return 1;
        } else {
                return n * Factorial(n-1);
        }
        }

        3. Add a new HTML page in "OOP" folder

        index.html

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script type="module">
                import Hello,{ Addition } from "../library/home.module.js";
                import Factorial from "../library/math.module.js";

                document.querySelector("p").innerHTML = `${Hello()}<br>Addition=${Addition(10,20)}`;
                document.querySelector("div").innerHTML = `Factorial of 5 is ${Factorial(5)}`;
        </script>
        </head>
        <body>
        <p></p>
        <div></div>
        </body>
        </html>

                        JavaScript Class
                        ----------------
- In computer programming class is a template.
- A template comprises of sample data and logic, which you can import and customize according to your requirements.
- If a class is mapping to business requirements then it is known as "Logical Entity".
- If a class is mapping to data requirements then it is known as "Model".
- Class comprises of members, which are used with reference of a object, If multiple objects are mapping to a class 
then it is known as "Blue Print".

Configuring Class:
- Class can be defined using 
    a) Declaration
    b) Expression

                Syntax: Declaration

                class  Product
                {

                }

                Syntax: Expression

                var Product = class {

                }

        Class Members:
        -------------
        - Every JavaScript class allows only following as class members

        1. Property
        2. Accessor
        3. Method
        4. Constructor

        FAQ: Can we define a variable as class member?
        Ans:  No. 

        FAQ: Why variable can't be a class member?
        Ans: Variable is immutable and class member can only have mutable member.

        FAQ: Can we define a variable in class?
        Ans: Yes.

                Property:
                ---------
                - It is a member of class used to store data.
                - Property can store any type data.
                        a) Primitive type
                        b) Non Primitive type
                - JavaScript class property can be defined just by using a property name.
                - Property will not have any  access modifiers.

                Syntax:
                class Product
                {
                Name = "TV";
                Price = 45000.44;
                Stock = true;
                Cities = [ ];
                Rating = { Rate: 4.2, Count: 600 };
                }

                - You can access the class properties by using "this" keyword within the class.
                - You can access the class properties outside class by using instance of class.

                Syntax:
                var  tv = new Product();
                tv.Name = newValue;

                Ex:
                <script>
                class Product
                {
                Name = "Samsung TV";
                Price = 45000.44;
                Rating = {Rate:4.3, Count:450}
                }
                let tv = new Product();
                document.write(`Name=${tv.Name}<br>Price=${tv.Price}<br>Rating=${tv.Rating.Rate}`);
                </script>

                Accessors:
                ----------
                - Accessor provides a fine grained control over property.
                - Accessor controls read and write operations on a property.
                - Accessors are 2 types
                        
                a) Getter      get()
                b) Setter      set()

                - Getter is used to read and return a value present in property.
                - Setter is used to write and store a value in property.

                Syntax:
                        propertyName = " ";
                        
                        get  aliasName()
                        {
                        return  this.propertyName;
                        }

                        set  aliasName(newValue)
                        {
                        this.propertyName = newValue;
                        }

                Ex:
                <script>
                var username = prompt("Enter User Name");
                var role = prompt("Enter Your Role", "Customer|Admin");
                var productname = prompt("Enter Product Name");

                class Product
                {
                        _productName;

                        get ProductName(){
                        return this._productName;
                        }

                        set ProductName(newName){
                        if(role=="admin"){
                                this._productName = newName;
                        } else {
                                document.write(`Hello ! ${username} your role ${role} is not authorized to set product name.`);
                        }
                        }

                }
                let obj = new Product();
                obj.ProductName = productname;
                if(obj.ProductName){
                        document.write(`Product Name=${obj.ProductName}`)
                }
                </script>

                Ex:
                <script>
                class Product
                {
                        Name = "Samsung TV";
                        Rating = {
                        CustomerRating: {Rate:3.5, Count:5600},
                        VendorRating: {Rate:4.2, Count:13}
                        }
                        get VendorRating(){
                        return this.Rating.VendorRating.Rate;
                        }
                }
                var obj = new Product();
                document.write("Vendor Rating=" + obj.VendorRating);
                </script>

                FAQ: What is difference between a variable and a property?
                Ans:  Variable is immutable 
                Property is mutable

                Method:
                -------
                - A method defines the logic.
                - A class related functionality can be defined using method.

                FAQ: Can we define a function as class member?
                Ans:  No. But you can have a function in class.

                - Method is configure just by using a name and parameters.
                - Method parameters are same as function parameters.

                Syntax:
                        class  Name
                        {
                        MethodName(params)
                        {
                        }
                        }

                Ex:
                <script>
                
                class Product
                {
                        Name = "Samsung TV";
                        Price = 45000.44;
                        Qty = 2;
                        Total(){
                        return this.Qty * this.Price;
                        }
                        Print(){
                        document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}`);
                        }
                }
                let obj = new Product();
                obj.Price = parseFloat(prompt("Enter Price"));
                obj.Print();
                
                </script>
                                        
                Constructor:
                ------------
                -  A constructor is responsible for instantiation.
                -  It is responsible for creating an object for class.
                - Class objects are created by using a special type of method called constructor.
                - JavaScript constructor is anonymous with constructor keyword.

                Syntax:
                class Demo
                {
                constructor(){ 
                }
                }

                - Every class have a default constructor.

                Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        class Database
                        {
                        constructor(){
                                document.write("Connected with database<br>");
                        }
                        Insert(){
                                document.write("Record Inserted");
                        }
                        Delete(){
                                document.write("Record Deleted");
                        }
                        Update(){
                                document.write("Record Updated");
                        }
                        }
                        function InsertClick(){
                        var obj = new Database();
                        obj.Insert();
                        }
                        function DeleteClick(){
                        var obj = new Database();
                        obj.Delete();
                        }
                        function UpdateClick(){
                        var obj = new Database();
                        obj.Update();
                        }
                </script>
                </head>
                <body>
                <button onclick="InsertClick()">Insert</button>
                <button onclick="UpdateClick()">Update</button>
                <button onclick="DeleteClick()">Delete</button>
                </body>
                </html>
        

                      Code Resuability & Extensibility
                      --------------------------------

- Code extensibility and reusability can be achived by using 2 techniques

    a) Aggregration
    b) Inheritance

- Code extensibility is required to achive backward compatibility.
- You can provide multiple versions of code, so that user can implement the suitable version.

        Aggregration: 
        -------------
        - It is the process of accessing the members of one class in another class without creating any relation between classes.
        - It is Object-to-Object communication.
        - It is reffered as "Has-A-Relation".

        Syntax:
        class A
        {
        members;
        }
        class B
        {
                method(){
                let obj = new A();
                obj.A_members;
                }
        }

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Extensibility</title>
        <script>
                class HDFC_Version1
                {
                Personal = "Personal Banking Services <br>";
                NRI = "NRI Services <br>";
                Print(){
                        document.write(`${this.Personal}<br>${this.NRI}<br>`);
                }
                }
                class HDFC_Version2
                {
                Loans = "Personal and Car Loans <br>";
                Print(){
                        let obj = new HDFC_Version1();
                        obj.Print();
                        document.write(`${this.Loans} <br>`);
                }
                }
                function InstallClick(){
                var ver = document.getElementById("lstVersions").value;
                switch(ver){
                        case "ver1": 
                        document.write("<h2>Version-1 Installed</h2>");
                        var obj1 = new HDFC_Version1();
                        obj1.Print();
                        break;
                        case "ver2": 
                        document.write("<h2>Version-2 Installed</h2>");
                        var obj2 = new HDFC_Version2();
                        obj2.Print();
                        break;
                        default: 
                        document.write("Please Select a Version");
                        break;
                }
                }
        </script>
        </head>
        <body>
        <h3>Install Bank APP</h3>
        <select id="lstVersions">
                <option>Select Version</option>
                <option value="ver1">Version-1</option>
                <option value="ver2">Version-2</option>
        </select>
        <button onclick="InstallClick()">Install</button>
        </body>
        </html>

        Inheritance:
        -----------
        - It is the process of extending and reusing the members of one class in another class by configuring
         relationship between classes.
        - The exisiting class can be extended by new class.
        - The existing class is known as "Super" class.
        - The extended class is known as "Derived" class.
        - The keyword "extends" is used to configure relation.
        - It is often reffered as "Is-A-Relation".
        - In inheritance the members of super class are accessed in derived class by using "super" keyword.

        Syntax:
        class  A
        {
        }
        class B extends A
        {
                super.A_members;
        }

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Extensibility</title>
        <script>
                class HDFC_Version1
                {
                Personal = "Personal Banking Services <br>";
                NRI = "NRI Services <br>";
                Print(){
                        document.write(`${this.Personal}<br>${this.NRI}<br>`);
                }
                }
                class HDFC_Version2 extends HDFC_Version1
                {
                Loans = "Personal and Car Loans <br>";
                Print(){
                        super.Print();
                        document.write(`${this.Loans} <br>`);
                }
                }
                class HDFC_Version3 extends HDFC_Version2
                {
                AGRI = "Govt. Bank Schemes <br>";
                Print(){
                        super.Print();
                        document.write(`${this.AGRI} <br>`);
                }
                }
                function InstallClick(){
                var ver = document.getElementById("lstVersions").value;
                switch(ver){
                        case "ver1": 
                        document.write("<h2>Version-1 Installed</h2>");
                        var obj1 = new HDFC_Version1();
                        obj1.Print();
                        break;
                        case "ver2": 
                        document.write("<h2>Version-2 Installed</h2>");
                        var obj2 = new HDFC_Version2();
                        obj2.Print();
                        break;
                        case "ver3": 
                        document.write("<h2>Version-3 Installed</h2>");
                        var obj3 = new HDFC_Version3();
                        obj3.Print();
                        break;
                        default: 
                        document.write("Please Select a Version");
                        break;
                }
                }
        </script>
        </head>
        <body>
        <h3>Install Bank APP</h3>
        <select id="lstVersions">
                <option>Select Version</option>
                <option value="ver1">Version-1</option>
                <option value="ver2">Version-2</option>
                <option value="ver3">Version-3</option>
        </select>
        <button onclick="InstallClick()">Install</button>
        </body>
        </html>

        Note: The basic inheritance rule is that a derived class constructor must call base class constructor. 
        But in JS it does not follow this rule. To implement this rule we must use "super()" in the derived class.

        Syntax:
        class Super
        {
        constructor(){ }
        }
        class Derived extends Super
        {
                constructor(){
                super();
                }
        }
        let obj = new Derived();

        Ex:
        <script>
        class Super
        {
                constructor(){
                document.write("Super Class Constructor<br>");
                }
        }
        class Derived extends Super
        {
                constructor(){
                super();
                document.write("Derived Class Constructor");
                }
        }
        let obj = new Derived();
        </script>

                        Polymorphism
                        ------------
- It is the process of creating a single base class reference which can use the memory of multiple derived classes.
- You can create one component or object, which can have the behaviour of multiple.
- Poly refers to "Many" and Morphos means "Forms".
- You can create one object that can serve for different classes.

        Ex:
        <script>
        class Employee
        {
                FirstName;
                LastName;
                Designation;
                Print(){
                document.write(`${this.FirstName} ${this.LastName} - ${this.Designation}<br>`);
                }
        }
        class Developer extends Employee
        {
                FirstName = "Raj";
                LastName = "Kumar";
                Designation = "Developer";
                Role = "Developer Role: Building, Debug, Testing";
                Print(){
                super.Print();
                document.write(`${this.Role}`);
                }
        }
        class Admin extends Employee
        {
                FirstName = "Kiran";
                LastName = "Rao";
                Designation = "Admin";
                Role = "Admin Role: Authorization, Authentication";
                Print(){
                super.Print();
                document.write(`${this.Role}`);
                }
        }
        class Manager extends Employee
        {
                FirstName = "Tom";
                LastName = "Hanks";
                Designation = "Manager";
                Role = "Manager Role: Approvals";
                Print(){
                super.Print();
                document.write(`${this.Role}`);
                }
        }
        let employees = new Array(new Developer(), new Admin(), new Manager());
        var designation = prompt("Enter Designation");
        for(var employee of employees){
                if(employee.Designation==designation){
                employee.Print();
                }
        }
        </script>

                        JavaScript Browser Objects
                        --------------------------
        1. window
        2. location
        3. navigator
        4. history
        5. document

        window:
        -------
        - It provides properties and methods that are used to control browser window.

        alert()
        confirm()
        prompt()
        open()
        close()
        print()  etc..

        Ex:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>
                <script>
                        function OpenClick(){
                        window.open('../public/images/a1.jpg','Ads','width=300 height=300');
                        }
                </script>
                </head>
                <body>
                <h1>Browser Window Object</h1>
                <button onclick="OpenClick()">Open</button>
                <button onclick="window.close()">Close</button>
                <button onclick="window.print()">Print</button>
                </body>
                </html>

                location:
                - It provides properties and methods that are used to access the client location details

                        host            returns server name or IP address
                        pathname        returns the current file path.
                        href            gets and sets complete URL.
                        port            returns the current port number.
                        protocol        return the protocol : http , file, https etc..

                Syntax:
                location.host
                location.pathname

                Ex:
                <script>
                document.write(`
                        IP Adderss  : ${location.host} <br>
                        Port Number : ${location.port} <br>
                        Protocol    : ${location.protocol} - ${(location.protocol==="http:")?"You are accessing from Live Server":"You are accessing from File System"} <br>
                        URL         : ${location.href} <br>
                        Path        : ${location.pathname}
                `)
                </script>

        navigator:
        ----------
        - It provides properties and methods that are used to get client browser details.

        appName        : returns browser family name.
        appVersion        : returns browser version
        platform            : returns current OS details
        cookieEnabled    : cookie status
        plugins[]            : plugin enabled in browser

        Ex:
        <script>
                document.write(`
                        ${(navigator.cookieEnabled==true)?"<h2>You can Login</h2>":"<h2>Cookies Disabled</h2>"} <br>
                        You are using : ${navigator.platform}
                `);
        </script>

        geoLocation        : It can access your current geo location.

        Ex:
        <script>
                navigator.geolocation.getCurrentPosition(function(position){
                        document.write(`
                        Latitude : ${position.coords.latitude} <br>
                        Longitude: ${position.coords.longitude}
                        `);
        })
        </script>

        FAQ: How to check the status of JavaScript in browser?
        Ans:  By using HTML element <noscript>

        Syntax:
        <body>
        <noscript>  please enable javascript on browser </noscript>
        </body>

        history:
        --------
        - It provides the properties and methods that are used to control access to current browsing history

        length            : total count of page you visited 
        back()            : moves to previous page
        forward()         : moves to next page
        go()              : moves to specific page in browser history

        Syntax:
        history.length
        history.back()
        
        <button onclick="history.back()"> Back </button>

        document:
        ---------
        - It provides properties and methods that are used to handle document elements.

                getElementById()
                querySelector()
                innerHTML
                innerText
                write() 
                appendChild() etc..

                                Browser Events
                                --------------
        - Event defines a trigger for element.
        - It defines actions to perform.
        - JavaScript browser events have 2 arguments
        a) this
        b) event

        Syntax:
        <button  onclick="f1(this, event)"> 

        - "this" sends information about current element, like

        id, name, className, width, height, value etc..

        - "event" sends information about current event, [click]

        clientX, clientY, altKey, ctrlKey, shiftKey, which etc..


        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function InsertClick(btnObj, e){
                document.write(`
                        Button Id : ${btnObj.id} <br>
                        Button Name: ${btnObj.name} <br>
                        Button Class: ${btnObj.className} <br>
                        X Position : ${e.clientX} <br>
                        Y Position : ${e.clientY} <br>
                        Ctrl Key   : ${e.ctrlKey}
                `);
                }
        </script>
        </head>
        <body>
        <button id="btnInsert" onclick="InsertClick(this, event)" name="Insert" class="btn btn-primary">Insert</button>
        </body>
        </html>

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
        function ImageClick(e){
                if(e.ctrlKey){
                window.open('../public/images/aws.jpg','Course','width=400 height=400');
                } else {
                alert(`Please click using ctrl key`);
                }
        }
        </script>
        </head>
        <body>
        <img onclick="ImageClick(event)" src="../public/images/aws.jpg" width="100" height="100">
        <p>Ctrl  + Click to open in new window</p>
        </body>
        </html>

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function Database(name){
                switch(name){
                        case "Insert": 
                        document.write("Record Inserted");
                        break;
                        case "Update": 
                        document.write("Record Updated");
                        break;
                        case "Delete": 
                        document.write("Record Deleted");
                        break;
                }
                }
        </script>
        </head>
        <body>
        <button name="Insert" onclick="Database(this.name)">Insert</button>
        <button name="Update" onclick="Database(this.name)">Update</button>
        <button name="Delete" onclick="Database(this.name)">Delete</button>
        </body>
        </html>

        - You can send custom args.


        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function ButtonClick(array, obj){
                document.write(`
                        Array Elements : ${array.toString()} <br>
                        Rate : ${obj.Rate} [${obj.Count}]
                `);
                }
        </script>
        </head>
        <body>
        <button onclick="ButtonClick(['TV', 'Mobile'], {Rate:4.3, Count:4500})">Click Me</button>
        </body>
        </html>

        - JavaScript browser events are classified into various groups

        1. Mouse Events
        2. Keyboard Events
        3. Button Events
        4. Element State Events
        5. Clipboard Events
        6. Form Events
        7. Touch Events etc...

        Types of Events:
        ----------------
        1. Mouse Events:
        ----------------
        - They are used to handle interactions with regard to mouse pointer and mouse button.

        - onmouseover
        - onmouseout
        - onmousedown
        - onmouseup
        - onmousemove

        Ex1:

        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function ShowPic1(){
                document.getElementById("pic").src="../public/images/realme1.jpg";
                }
                function ShowPic2(){
                document.getElementById("pic").src="../public/images/realme.jpg";
                }
        </script>
        </head>
        <body>
        <marquee scrollamount="15" onmouseover="this.stop()" onmouseout="this.start()">
                <img src="../public/images/a1.jpg" width="100" height="100">
                <img src="../public/images/a2.jpg" width="100" height="100">
                <img src="../public/images/a3.jpg" width="100" height="100">
                <img src="../public/images/a4.jpg" width="100" height="100">
        </marquee>
        <div>
                <img onmousedown="ShowPic1()" onmouseup="ShowPic2()" id="pic" src="../public/images/realme.jpg" width="200" height="300">
                <p>Press hold down mouse button to change image</p>
        </div>
        </body>
        </html>

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
        function GetPosition(e){
                var flag = document.getElementById("flag");
                flag.style.position = "absolute";
                flag.style.top = e.clientY + "px";
                flag.style.left = e.clientX + "px";
                document.querySelector("div").innerHTML = `x=${e.clientX} y=${e.clientY}`;
        }
        </script>
        </head>
        <body onmousemove="GetPosition(event)">
        <div style="height: 1000px;"></div>
        <img id="flag" src="../public/images/flag.gif" width="50" height="50">
        </body>
        </html>

        2. Key Board Events:
        -------------------
        - They handle interactions with regard to key or keycode.

        - onkeyup
        - onkeydown
        - onkeypress

        Ex: 
        1. data/users.json

        [
        {
                "UserName": "john_nit",
                "Password": "john@123"
        },
        {
                "UserName": "raj_hyd",
                "Password": "raj11"
        }
        ]

        2. demo.html
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function VerifyCaps(e){
                var warning = document.getElementById("warning");
                if(e.keyCode>=65 && e.keyCode<=90){
                        warning.style.display = "block";
                } else {
                        warning.style.display = "none";
                }
                }
                function VerifyUser(){
                var username = document.getElementById("UserName").value;
                var userError = document.getElementById("userError");

                fetch("../data/users.json")
                .then(function(response){
                        return response.json();
                })
                .then(function(users){
                        for(var user of users){
                        if(user.UserName===username){
                                userError.innerHTML = "User Name Taken - Try Another".fontcolor('red');
                                break;
                        } else {
                                userError.innerHTML = "User Name Available".fontcolor('green');
                        }
                        }
                })
                }
        </script>
        </head>
        <body>
        <dl>
                <dt>User Name</dt>
                <dd><input type="text" id="UserName" onkeyup="VerifyUser()"></dd>
                <dd id="userError"></dd>
                <dt>Your Password</dt>
                <dd>
                <input type="password" id="Password" onkeypress="VerifyCaps(event)">
                </dd>
                <dd id="warning" style="display: none;">Warning - Caps ON</dd>
        </dl>
        </body>
        </html>

        3. Button Events:
        -----------------
        - onclick                       single click    
        - ondblclick                    double click
        - oncontextmenu                 right click
        - onselectstart                 drag

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function ViewLarge(){
                window.open("../public/images/aws.jpg","AWS","width=400 height=400");
                }
                document.oncontextmenu = function(){
                alert("Rightclick Not allowed");
                return false;
                }
                document.onselectstart = function(){
                return false;
                }
        </script>
        </head>
        <body>
        <img ondblclick="ViewLarge()" src="../public/images/aws.jpg" width="100" height="100">
        <p>Double click on image to view large</p>
        </body>
        </html>

        4. Clipboard Events:
        --------------------
        - oncut
        - oncopy
        - onpaste

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function Cut(){
                document.getElementById("msg").innerHTML = "Removed and Copied to Clipboard";
                }
                function Copy(){
                document.getElementById("msg").innerHTML = "Copied to Clipboard";
                }
                function Paste(){
                document.getElementById("msg").innerHTML = "Inserted from Clipboard";
                }
                document.oncopy = function(){
                return false;
                }
        </script>
        </head>
        <body>
        <p>Your comments</p>
        <textarea oncut="Cut()" oncopy="Copy()" onpaste="Paste()" rows="5" cols="40"></textarea>
        <p id="msg"></p>
        </body>
        </html>

        5. Element State Events:
        ------------------------
        - onchange
        - onfocus
        - onblur


        6. Touch Events:
        ----------------
        - ontouchstart
        - ontouchend
        - ontouchmove

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function CourseTouched(course){
                var msg = document.getElementById("msg");
                switch(course){
                        case "ui": 
                        msg.innerHTML = "UI Technologies - HTML, CSS, JavaScript";
                        break;
                        case "aws": 
                        msg.innerHTML = "AWS - Cloud Computing - Virtual Servers, Virtual Database";
                        break;
                }
                }
        </script>
        </head>
        <body>
        <img ontouchstart="CourseTouched('ui')" src="../public/images/ui.jpg" width="100" height="100">
        <img ontouchstart="CourseTouched('aws')" src="../public/images/aws.jpg" width="100" height="100">
        <p id="msg"></p>
        </body>
        </html>

        7. Timer Events:
        ----------------
        - setTimeout
        - setInterval
        - clearTimeout
        - clearInterval


        8. Form Events:
        ---------------
        - onsubmit
        - onreset

        These events are defined for <form> element.
        They function using submit and reset buttons.

        Syntax:
        <form  onsubmit="function(){}"   onreset="function(){}">
        </form>

        Ex:
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        </head>
        <body>
        <form method="post" action="page.jsp|page.aspx" onsubmit="alert('Your form will be submitted to server')" onreset="alert('Form will reset')">
                <dl>
                <dt>User Name</dt>
                <dd><input type="text" name="UserName"></dd>
                </dl>
                <button type="submit">Submit</button>
                <button type="reset">Reset</button>
        </form>
        </body>
        </html>

                                Local Storage
                                -------------
        - It is the memory allocated for browser, where you can store value and use across pages.
        - Local storage is accessible accross tabs.
        - It is permanent storage 
        - It is present even when you close the browser.

        Syntax:
        localStorage.setItem("key", value);
        localStorage.getItem("key");

        Session Storage:
        ----------------
        - It is only for specific tab.
        - Not accessible accross tabs
        - It is temporary
        - It is removed when browser is closed.

        Syntax:
        sessionStorage.setItem("key", value);
        sessionStorage.getItem("key");

        Ex:
        login.html
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function SubmitClick(){
                var username = document.getElementById("UserName").value;
                sessionStorage.setItem("username", username);
                location.href = "success.html";
                
                }
        </script>
        </head>
        <body>
        User Name :
        <input type="text" id="UserName"> <button onclick="SubmitClick()">Submit</button>
        </body>
        </html>

        success.html
        <!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <script>
                function bodyload(){
                var uname = sessionStorage.getItem("username");
                document.querySelector("p").innerHTML = `Hello ! ${uname}`;
                }
        </script>
        </head>
        <body onload="bodyload()">
        <h2>Success Page</h2>
        <p></p>
        </body>
        </html>

Function Generators:
--------------------
- Function Generator configures an iterator.
- Iterator is a design pattern used to access elements from collection in sequential order.
- JavaScript Iterators are  forEach(), for..in, for..of, map(), find(), filter() etc..

Syntax:    
        collection.map(function(item){
            
        })

        function* map(){
           yeild value;
           yeild value;
        }
        value, next(), return, done [true|false]
        
FAQ: What is the architecture behind "forEach() or map()"?
Ans: Both are function generators
        a) value => returns the value in collection by using yeild.
        b) done  => returns boolean true if it is end of collection.
        c) next() => It moves the next value in collection.
        d) return => It terminates the iteration.

Ex:
<script>
    function* ReadCollection(){
        yield 10;
        yield 20;
        yield 30;
    }
    var data = ReadCollection();
    console.log(
        `
            ${data.next().value} \n 
            ${data.next().value} \n 
            ${data.next().value} \n 
           
        `
    )
</script>

                    Function Callbacks and Promise

- A callback function executes automatically according to the state and situation.
- It is synchronous. It uses blocking technique.
- If a function is executing then it will block all other functions.
- Synchronous is slow in rendering the result.

Syntax:
        function  Name(success, failure)
        {
          success();
          failure();
        }

Ex:
<script>
    function  FetchData(url, success, failure){
        if(url==="http://fakestoreapi.com&quot;){
            success();
        } else {
            failure();
        }
    }
    FetchData(
        prompt("Enter URL"), 
        function(){
            document.write("Data Fetched Successfully..");
        },
        function(){
            document.write("Invalid URL - Unable to Fetch");
        }
    ) 
</script>

Note: To handle Asynchronous function JavaScript ES5 introduced 
        a) async
        b) await
      However ES6+ version prefer using Promise().

- A JavaScript promise will execute function using Async technique.
- It is an unblocking technique, without blocking the other request it can execute the functions.
- It is faster.
- Promise comprises various states
    a) pending
    b) rejected
    c) resolved

Syntax:
    var reference = new Promise(function(resolve){ }, function(reject){ });
    reference.then().catch().finally()

    then()    it uses a callback function that executes when resolved
    catch()    will execute when rejected
    finally()    will execute always

Ex:
<script>
    var FetchData = new Promise(function(resolve){
        resolve('Data Fetched Successfully..');
    }, function(reject){
        reject('Unable to Fetch - Invalid');
    });
    
    FetchData(function(url){
        url = prompt("Enter Url");
    }).then(function(response){
        document.write(response);
    }).catch(function(error){
        document.write(error);
    })

</script>

                        JavaScript AJAX
                        ---------------

- Asynchronous JavaScript And XML [AJAX]
- Async request will execute without blocking other requests
- XML is a medium used to transport data across requests.
  [Extensible Markup Language]
- Ajax can configure Partial PostBack [Without reloading complete page new details can be added to page].
- Without submitting complete page, you can submit specific portion of page.
- Ajax is handled by using
    "XMLHttpRequest" object